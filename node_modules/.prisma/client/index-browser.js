
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.7.1
 * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
 */
Prisma.prismaVersion = {
  client: "4.7.1",
  engine: "272861e07ab64f234d3ffc4094e32bd61775599c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ContentScalarFieldEnum = makeEnum({
  id: 'id',
  markdownText: 'markdownText',
  plainText: 'plainText',
  date: 'date',
  linkedEntity: 'linkedEntity',
  linkedEntityId: 'linkedEntityId'
});

exports.Prisma.EnrollmentScalarFieldEnum = makeEnum({
  userId: 'userId',
  subjectId: 'subjectId',
  enrollmentDate: 'enrollmentDate',
  roleTitle: 'roleTitle',
  status: 'status'
});

exports.Prisma.EventScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  linkedEntity: 'linkedEntity',
  linkedEntityId: 'linkedEntityId'
});

exports.Prisma.EventUserPresenceScalarFieldEnum = makeEnum({
  id: 'id',
  presenceStatus: 'presenceStatus',
  roomTimeEventId: 'roomTimeEventId',
  userId: 'userId'
});

exports.Prisma.PostScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  Date: 'Date',
  linkedEntity: 'linkedEntity',
  linkedEntityId: 'linkedEntityId',
  contentId: 'contentId',
  ownerId: 'ownerId'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.RoomScalarFieldEnum = makeEnum({
  id: 'id',
  capacity: 'capacity'
});

exports.Prisma.RoomTimeEventScalarFieldEnum = makeEnum({
  id: 'id',
  dateStart: 'dateStart',
  dateEnd: 'dateEnd',
  eventId: 'eventId',
  roomId: 'roomId'
});

exports.Prisma.SeminarScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  mentorId: 'mentorId',
  type: 'type',
  contentId: 'contentId',
  subjectId: 'subjectId',
  userId: 'userId'
});

exports.Prisma.SeminarSuggestionScalarFieldEnum = makeEnum({
  id: 'id',
  seminarId: 'seminarId',
  subjectId: 'subjectId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.SubjectScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  ects_bod: 'ects_bod',
  semester: 'semester',
  status: 'status',
  contentId: 'contentId'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  password: 'password',
  firstname: 'firstname',
  lastname: 'lastname',
  jmbag: 'jmbag',
  email: 'email',
  status: 'status',
  mentorID: 'mentorID'
});
exports.LinkedEntity = makeEnum({
  USER: 'USER',
  SUBJECT: 'SUBJECT',
  SEMINAR: 'SEMINAR',
  POST: 'POST'
});

exports.Role = makeEnum({
  STUDENT: 'STUDENT',
  PROFESSOR: 'PROFESSOR',
  NOSITELJ: 'NOSITELJ',
  ASISTENT: 'ASISTENT',
  ADMIN: 'ADMIN'
});

exports.Semester = makeEnum({
  WINTER: 'WINTER',
  SUMMER: 'SUMMER'
});

exports.Status = makeEnum({
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Subject: 'Subject',
  Content: 'Content',
  Post: 'Post',
  Enrollment: 'Enrollment',
  Seminar: 'Seminar',
  Event: 'Event',
  SeminarSuggestion: 'SeminarSuggestion',
  Room: 'Room',
  RoomTimeEvent: 'RoomTimeEvent',
  EventUserPresence: 'EventUserPresence'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
