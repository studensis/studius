
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  password: string
  firstname: string
  lastname: string
  jmbag: string
  email: string
  status: Role
  mentorID: number
}

/**
 * Model Subject
 * 
 */
export type Subject = {
  id: number
  title: string
  description: string
  ects_bod: number
  semester: Semester
  status: Status
  contentId: number
}

/**
 * Model Content
 * 
 */
export type Content = {
  id: number
  markdownText: string
  plainText: string
  date: Date
  linkedEntity: LinkedEntity
  linkedEntityId: number
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  title: string
  Date: Date
  linkedEntity: LinkedEntity
  linkedEntityId: number
  contentId: number
  ownerId: number
}

/**
 * Model Enrollment
 * 
 */
export type Enrollment = {
  userId: number
  subjectId: number
  enrollmentDate: Date
  roleTitle: Role
  status: Status
}

/**
 * Model Seminar
 * 
 */
export type Seminar = {
  id: number
  title: string
  description: string
  mentorId: number
  type: string
  contentId: string
  subjectId: string
  userId: string
}

/**
 * Model Event
 * 
 */
export type Event = {
  id: number
  title: string
  description: string
  linkedEntity: string
  linkedEntityId: string
}

/**
 * Model SeminarSuggestion
 * 
 */
export type SeminarSuggestion = {
  id: number
  seminarId: number
  subjectId: number
}

/**
 * Model Room
 * 
 */
export type Room = {
  id: string
  capacity: number
}

/**
 * Model RoomTimeEvent
 * 
 */
export type RoomTimeEvent = {
  id: number
  dateStart: Date
  dateEnd: Date
  eventId: number
  roomId: string
}

/**
 * Model EventUserPresence
 * 
 */
export type EventUserPresence = {
  id: number
  presenceStatus: boolean
  roomTimeEventId: number
  userId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const LinkedEntity: {
  USER: 'USER',
  SUBJECT: 'SUBJECT',
  SEMINAR: 'SEMINAR',
  POST: 'POST'
};

export type LinkedEntity = (typeof LinkedEntity)[keyof typeof LinkedEntity]


export const Role: {
  STUDENT: 'STUDENT',
  PROFESSOR: 'PROFESSOR',
  NOSITELJ: 'NOSITELJ',
  ASISTENT: 'ASISTENT',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Semester: {
  WINTER: 'WINTER',
  SUMMER: 'SUMMER'
};

export type Semester = (typeof Semester)[keyof typeof Semester]


export const Status: {
  ACTIVE: 'ACTIVE',
  ARCHIVED: 'ARCHIVED'
};

export type Status = (typeof Status)[keyof typeof Status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.subject`: Exposes CRUD operations for the **Subject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subjects
    * const subjects = await prisma.subject.findMany()
    * ```
    */
  get subject(): Prisma.SubjectDelegate<GlobalReject>;

  /**
   * `prisma.content`: Exposes CRUD operations for the **Content** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contents
    * const contents = await prisma.content.findMany()
    * ```
    */
  get content(): Prisma.ContentDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<GlobalReject>;

  /**
   * `prisma.seminar`: Exposes CRUD operations for the **Seminar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seminars
    * const seminars = await prisma.seminar.findMany()
    * ```
    */
  get seminar(): Prisma.SeminarDelegate<GlobalReject>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<GlobalReject>;

  /**
   * `prisma.seminarSuggestion`: Exposes CRUD operations for the **SeminarSuggestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeminarSuggestions
    * const seminarSuggestions = await prisma.seminarSuggestion.findMany()
    * ```
    */
  get seminarSuggestion(): Prisma.SeminarSuggestionDelegate<GlobalReject>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<GlobalReject>;

  /**
   * `prisma.roomTimeEvent`: Exposes CRUD operations for the **RoomTimeEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoomTimeEvents
    * const roomTimeEvents = await prisma.roomTimeEvent.findMany()
    * ```
    */
  get roomTimeEvent(): Prisma.RoomTimeEventDelegate<GlobalReject>;

  /**
   * `prisma.eventUserPresence`: Exposes CRUD operations for the **EventUserPresence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventUserPresences
    * const eventUserPresences = await prisma.eventUserPresence.findMany()
    * ```
    */
  get eventUserPresence(): Prisma.EventUserPresenceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.7.1
   * Query Engine version: 272861e07ab64f234d3ffc4094e32bd61775599c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Subject: 'Subject',
    Content: 'Content',
    Post: 'Post',
    Enrollment: 'Enrollment',
    Seminar: 'Seminar',
    Event: 'Event',
    SeminarSuggestion: 'SeminarSuggestion',
    Room: 'Room',
    RoomTimeEvent: 'RoomTimeEvent',
    EventUserPresence: 'EventUserPresence'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<PrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    menteeId: number
    Enrolled: number
    EventPresence: number
  }

  export type UserCountOutputTypeSelect = {
    menteeId?: boolean
    Enrolled?: boolean
    EventPresence?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type SubjectCountOutputType
   */


  export type SubjectCountOutputType = {
    Enrollment: number
  }

  export type SubjectCountOutputTypeSelect = {
    Enrollment?: boolean
  }

  export type SubjectCountOutputTypeGetPayload<S extends boolean | null | undefined | SubjectCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SubjectCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (SubjectCountOutputTypeArgs)
    ? SubjectCountOutputType 
    : S extends { select: any } & (SubjectCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SubjectCountOutputType ? SubjectCountOutputType[P] : never
  } 
      : SubjectCountOutputType




  // Custom InputTypes

  /**
   * SubjectCountOutputType without action
   */
  export type SubjectCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SubjectCountOutputType
     * 
    **/
    select?: SubjectCountOutputTypeSelect | null
  }



  /**
   * Count Type RoomTimeEventCountOutputType
   */


  export type RoomTimeEventCountOutputType = {
    EventUserPresence: number
  }

  export type RoomTimeEventCountOutputTypeSelect = {
    EventUserPresence?: boolean
  }

  export type RoomTimeEventCountOutputTypeGetPayload<S extends boolean | null | undefined | RoomTimeEventCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RoomTimeEventCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (RoomTimeEventCountOutputTypeArgs)
    ? RoomTimeEventCountOutputType 
    : S extends { select: any } & (RoomTimeEventCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof RoomTimeEventCountOutputType ? RoomTimeEventCountOutputType[P] : never
  } 
      : RoomTimeEventCountOutputType




  // Custom InputTypes

  /**
   * RoomTimeEventCountOutputType without action
   */
  export type RoomTimeEventCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEventCountOutputType
     * 
    **/
    select?: RoomTimeEventCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    mentorID: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    mentorID: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    password: string | null
    firstname: string | null
    lastname: string | null
    jmbag: string | null
    email: string | null
    status: Role | null
    mentorID: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    password: string | null
    firstname: string | null
    lastname: string | null
    jmbag: string | null
    email: string | null
    status: Role | null
    mentorID: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    password: number
    firstname: number
    lastname: number
    jmbag: number
    email: number
    status: number
    mentorID: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    mentorID?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    mentorID?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    password?: true
    firstname?: true
    lastname?: true
    jmbag?: true
    email?: true
    status?: true
    mentorID?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    password?: true
    firstname?: true
    lastname?: true
    jmbag?: true
    email?: true
    status?: true
    mentorID?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    password?: true
    firstname?: true
    lastname?: true
    jmbag?: true
    email?: true
    status?: true
    mentorID?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentorID: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    password?: boolean
    firstname?: boolean
    lastname?: boolean
    jmbag?: boolean
    email?: boolean
    status?: boolean
    mentorID?: boolean
    mentor?: boolean | UserArgs
    menteeId?: boolean | UserFindManyArgs
    Enrolled?: boolean | EnrollmentFindManyArgs
    EventPresence?: boolean | EventUserPresenceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    mentor?: boolean | UserArgs
    menteeId?: boolean | UserFindManyArgs
    Enrolled?: boolean | EnrollmentFindManyArgs
    EventPresence?: boolean | EventUserPresenceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  } 

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'mentor' ? UserGetPayload<S['include'][P]> :
        P extends 'menteeId' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'Enrolled' ? Array < EnrollmentGetPayload<S['include'][P]>>  :
        P extends 'EventPresence' ? Array < EventUserPresenceGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'mentor' ? UserGetPayload<S['select'][P]> :
        P extends 'menteeId' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'Enrolled' ? Array < EnrollmentGetPayload<S['select'][P]>>  :
        P extends 'EventPresence' ? Array < EventUserPresenceGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    mentor<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    menteeId<T extends UserFindManyArgs= {}>(args?: Subset<T, UserFindManyArgs>): PrismaPromise<Array<UserGetPayload<T>>| Null>;

    Enrolled<T extends EnrollmentFindManyArgs= {}>(args?: Subset<T, EnrollmentFindManyArgs>): PrismaPromise<Array<EnrollmentGetPayload<T>>| Null>;

    EventPresence<T extends EventUserPresenceFindManyArgs= {}>(args?: Subset<T, EventUserPresenceFindManyArgs>): PrismaPromise<Array<EventUserPresenceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Subject
   */


  export type AggregateSubject = {
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  export type SubjectAvgAggregateOutputType = {
    id: number | null
    ects_bod: number | null
    contentId: number | null
  }

  export type SubjectSumAggregateOutputType = {
    id: number | null
    ects_bod: number | null
    contentId: number | null
  }

  export type SubjectMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    ects_bod: number | null
    semester: Semester | null
    status: Status | null
    contentId: number | null
  }

  export type SubjectMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    ects_bod: number | null
    semester: Semester | null
    status: Status | null
    contentId: number | null
  }

  export type SubjectCountAggregateOutputType = {
    id: number
    title: number
    description: number
    ects_bod: number
    semester: number
    status: number
    contentId: number
    _all: number
  }


  export type SubjectAvgAggregateInputType = {
    id?: true
    ects_bod?: true
    contentId?: true
  }

  export type SubjectSumAggregateInputType = {
    id?: true
    ects_bod?: true
    contentId?: true
  }

  export type SubjectMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ects_bod?: true
    semester?: true
    status?: true
    contentId?: true
  }

  export type SubjectMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ects_bod?: true
    semester?: true
    status?: true
    contentId?: true
  }

  export type SubjectCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    ects_bod?: true
    semester?: true
    status?: true
    contentId?: true
    _all?: true
  }

  export type SubjectAggregateArgs = {
    /**
     * Filter which Subject to aggregate.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subjects
    **/
    _count?: true | SubjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubjectMaxAggregateInputType
  }

  export type GetSubjectAggregateType<T extends SubjectAggregateArgs> = {
        [P in keyof T & keyof AggregateSubject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubject[P]>
      : GetScalarType<T[P], AggregateSubject[P]>
  }




  export type SubjectGroupByArgs = {
    where?: SubjectWhereInput
    orderBy?: Enumerable<SubjectOrderByWithAggregationInput>
    by: Array<SubjectScalarFieldEnum>
    having?: SubjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubjectCountAggregateInputType | true
    _avg?: SubjectAvgAggregateInputType
    _sum?: SubjectSumAggregateInputType
    _min?: SubjectMinAggregateInputType
    _max?: SubjectMaxAggregateInputType
  }


  export type SubjectGroupByOutputType = {
    id: number
    title: string
    description: string
    ects_bod: number
    semester: Semester
    status: Status
    contentId: number
    _count: SubjectCountAggregateOutputType | null
    _avg: SubjectAvgAggregateOutputType | null
    _sum: SubjectSumAggregateOutputType | null
    _min: SubjectMinAggregateOutputType | null
    _max: SubjectMaxAggregateOutputType | null
  }

  type GetSubjectGroupByPayload<T extends SubjectGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SubjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubjectGroupByOutputType[P]>
            : GetScalarType<T[P], SubjectGroupByOutputType[P]>
        }
      >
    >


  export type SubjectSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    ects_bod?: boolean
    semester?: boolean
    status?: boolean
    contentId?: boolean
    Enrollment?: boolean | EnrollmentFindManyArgs
    _count?: boolean | SubjectCountOutputTypeArgs
  }


  export type SubjectInclude = {
    Enrollment?: boolean | EnrollmentFindManyArgs
    _count?: boolean | SubjectCountOutputTypeArgs
  } 

  export type SubjectGetPayload<S extends boolean | null | undefined | SubjectArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Subject :
    S extends undefined ? never :
    S extends { include: any } & (SubjectArgs | SubjectFindManyArgs)
    ? Subject  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Enrollment' ? Array < EnrollmentGetPayload<S['include'][P]>>  :
        P extends '_count' ? SubjectCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SubjectArgs | SubjectFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Enrollment' ? Array < EnrollmentGetPayload<S['select'][P]>>  :
        P extends '_count' ? SubjectCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Subject ? Subject[P] : never
  } 
      : Subject


  type SubjectCountArgs = Merge<
    Omit<SubjectFindManyArgs, 'select' | 'include'> & {
      select?: SubjectCountAggregateInputType | true
    }
  >

  export interface SubjectDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Subject that matches the filter.
     * @param {SubjectFindUniqueArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubjectFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SubjectFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Subject'> extends True ? Prisma__SubjectClient<SubjectGetPayload<T>> : Prisma__SubjectClient<SubjectGetPayload<T> | null, null>

    /**
     * Find one Subject that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubjectFindUniqueOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubjectFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SubjectFindUniqueOrThrowArgs>
    ): Prisma__SubjectClient<SubjectGetPayload<T>>

    /**
     * Find the first Subject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubjectFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SubjectFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Subject'> extends True ? Prisma__SubjectClient<SubjectGetPayload<T>> : Prisma__SubjectClient<SubjectGetPayload<T> | null, null>

    /**
     * Find the first Subject that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindFirstOrThrowArgs} args - Arguments to find a Subject
     * @example
     * // Get one Subject
     * const subject = await prisma.subject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubjectFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SubjectFindFirstOrThrowArgs>
    ): Prisma__SubjectClient<SubjectGetPayload<T>>

    /**
     * Find zero or more Subjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subjects
     * const subjects = await prisma.subject.findMany()
     * 
     * // Get first 10 Subjects
     * const subjects = await prisma.subject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subjectWithIdOnly = await prisma.subject.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubjectFindManyArgs>(
      args?: SelectSubset<T, SubjectFindManyArgs>
    ): PrismaPromise<Array<SubjectGetPayload<T>>>

    /**
     * Create a Subject.
     * @param {SubjectCreateArgs} args - Arguments to create a Subject.
     * @example
     * // Create one Subject
     * const Subject = await prisma.subject.create({
     *   data: {
     *     // ... data to create a Subject
     *   }
     * })
     * 
    **/
    create<T extends SubjectCreateArgs>(
      args: SelectSubset<T, SubjectCreateArgs>
    ): Prisma__SubjectClient<SubjectGetPayload<T>>

    /**
     * Create many Subjects.
     *     @param {SubjectCreateManyArgs} args - Arguments to create many Subjects.
     *     @example
     *     // Create many Subjects
     *     const subject = await prisma.subject.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubjectCreateManyArgs>(
      args?: SelectSubset<T, SubjectCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Subject.
     * @param {SubjectDeleteArgs} args - Arguments to delete one Subject.
     * @example
     * // Delete one Subject
     * const Subject = await prisma.subject.delete({
     *   where: {
     *     // ... filter to delete one Subject
     *   }
     * })
     * 
    **/
    delete<T extends SubjectDeleteArgs>(
      args: SelectSubset<T, SubjectDeleteArgs>
    ): Prisma__SubjectClient<SubjectGetPayload<T>>

    /**
     * Update one Subject.
     * @param {SubjectUpdateArgs} args - Arguments to update one Subject.
     * @example
     * // Update one Subject
     * const subject = await prisma.subject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubjectUpdateArgs>(
      args: SelectSubset<T, SubjectUpdateArgs>
    ): Prisma__SubjectClient<SubjectGetPayload<T>>

    /**
     * Delete zero or more Subjects.
     * @param {SubjectDeleteManyArgs} args - Arguments to filter Subjects to delete.
     * @example
     * // Delete a few Subjects
     * const { count } = await prisma.subject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubjectDeleteManyArgs>(
      args?: SelectSubset<T, SubjectDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subjects
     * const subject = await prisma.subject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubjectUpdateManyArgs>(
      args: SelectSubset<T, SubjectUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Subject.
     * @param {SubjectUpsertArgs} args - Arguments to update or create a Subject.
     * @example
     * // Update or create a Subject
     * const subject = await prisma.subject.upsert({
     *   create: {
     *     // ... data to create a Subject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subject we want to update
     *   }
     * })
    **/
    upsert<T extends SubjectUpsertArgs>(
      args: SelectSubset<T, SubjectUpsertArgs>
    ): Prisma__SubjectClient<SubjectGetPayload<T>>

    /**
     * Count the number of Subjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectCountArgs} args - Arguments to filter Subjects to count.
     * @example
     * // Count the number of Subjects
     * const count = await prisma.subject.count({
     *   where: {
     *     // ... the filter for the Subjects we want to count
     *   }
     * })
    **/
    count<T extends SubjectCountArgs>(
      args?: Subset<T, SubjectCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubjectAggregateArgs>(args: Subset<T, SubjectAggregateArgs>): PrismaPromise<GetSubjectAggregateType<T>>

    /**
     * Group by Subject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubjectGroupByArgs['orderBy'] }
        : { orderBy?: SubjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubjectGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Subject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubjectClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Enrollment<T extends EnrollmentFindManyArgs= {}>(args?: Subset<T, EnrollmentFindManyArgs>): PrismaPromise<Array<EnrollmentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Subject base type for findUnique actions
   */
  export type SubjectFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter, which Subject to fetch.
     * 
    **/
    where: SubjectWhereUniqueInput
  }

  /**
   * Subject: findUnique
   */
  export interface SubjectFindUniqueArgs extends SubjectFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Subject findUniqueOrThrow
   */
  export type SubjectFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter, which Subject to fetch.
     * 
    **/
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject base type for findFirst actions
   */
  export type SubjectFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter, which Subject to fetch.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     * 
    **/
    distinct?: Enumerable<SubjectScalarFieldEnum>
  }

  /**
   * Subject: findFirst
   */
  export interface SubjectFindFirstArgs extends SubjectFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Subject findFirstOrThrow
   */
  export type SubjectFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter, which Subject to fetch.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subjects.
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subjects.
     * 
    **/
    distinct?: Enumerable<SubjectScalarFieldEnum>
  }


  /**
   * Subject findMany
   */
  export type SubjectFindManyArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter, which Subjects to fetch.
     * 
    **/
    where?: SubjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subjects to fetch.
     * 
    **/
    orderBy?: Enumerable<SubjectOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subjects.
     * 
    **/
    cursor?: SubjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subjects from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subjects.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SubjectScalarFieldEnum>
  }


  /**
   * Subject create
   */
  export type SubjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * The data needed to create a Subject.
     * 
    **/
    data: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
  }


  /**
   * Subject createMany
   */
  export type SubjectCreateManyArgs = {
    /**
     * The data used to create many Subjects.
     * 
    **/
    data: Enumerable<SubjectCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Subject update
   */
  export type SubjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * The data needed to update a Subject.
     * 
    **/
    data: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
    /**
     * Choose, which Subject to update.
     * 
    **/
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject updateMany
   */
  export type SubjectUpdateManyArgs = {
    /**
     * The data used to update Subjects.
     * 
    **/
    data: XOR<SubjectUpdateManyMutationInput, SubjectUncheckedUpdateManyInput>
    /**
     * Filter which Subjects to update
     * 
    **/
    where?: SubjectWhereInput
  }


  /**
   * Subject upsert
   */
  export type SubjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * The filter to search for the Subject to update in case it exists.
     * 
    **/
    where: SubjectWhereUniqueInput
    /**
     * In case the Subject found by the `where` argument doesn't exist, create a new Subject with this data.
     * 
    **/
    create: XOR<SubjectCreateInput, SubjectUncheckedCreateInput>
    /**
     * In case the Subject was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SubjectUpdateInput, SubjectUncheckedUpdateInput>
  }


  /**
   * Subject delete
   */
  export type SubjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
    /**
     * Filter which Subject to delete.
     * 
    **/
    where: SubjectWhereUniqueInput
  }


  /**
   * Subject deleteMany
   */
  export type SubjectDeleteManyArgs = {
    /**
     * Filter which Subjects to delete
     * 
    **/
    where?: SubjectWhereInput
  }


  /**
   * Subject without action
   */
  export type SubjectArgs = {
    /**
     * Select specific fields to fetch from the Subject
     * 
    **/
    select?: SubjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SubjectInclude | null
  }



  /**
   * Model Content
   */


  export type AggregateContent = {
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  export type ContentAvgAggregateOutputType = {
    id: number | null
    linkedEntityId: number | null
  }

  export type ContentSumAggregateOutputType = {
    id: number | null
    linkedEntityId: number | null
  }

  export type ContentMinAggregateOutputType = {
    id: number | null
    markdownText: string | null
    plainText: string | null
    date: Date | null
    linkedEntity: LinkedEntity | null
    linkedEntityId: number | null
  }

  export type ContentMaxAggregateOutputType = {
    id: number | null
    markdownText: string | null
    plainText: string | null
    date: Date | null
    linkedEntity: LinkedEntity | null
    linkedEntityId: number | null
  }

  export type ContentCountAggregateOutputType = {
    id: number
    markdownText: number
    plainText: number
    date: number
    linkedEntity: number
    linkedEntityId: number
    _all: number
  }


  export type ContentAvgAggregateInputType = {
    id?: true
    linkedEntityId?: true
  }

  export type ContentSumAggregateInputType = {
    id?: true
    linkedEntityId?: true
  }

  export type ContentMinAggregateInputType = {
    id?: true
    markdownText?: true
    plainText?: true
    date?: true
    linkedEntity?: true
    linkedEntityId?: true
  }

  export type ContentMaxAggregateInputType = {
    id?: true
    markdownText?: true
    plainText?: true
    date?: true
    linkedEntity?: true
    linkedEntityId?: true
  }

  export type ContentCountAggregateInputType = {
    id?: true
    markdownText?: true
    plainText?: true
    date?: true
    linkedEntity?: true
    linkedEntityId?: true
    _all?: true
  }

  export type ContentAggregateArgs = {
    /**
     * Filter which Content to aggregate.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contents
    **/
    _count?: true | ContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContentMaxAggregateInputType
  }

  export type GetContentAggregateType<T extends ContentAggregateArgs> = {
        [P in keyof T & keyof AggregateContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContent[P]>
      : GetScalarType<T[P], AggregateContent[P]>
  }




  export type ContentGroupByArgs = {
    where?: ContentWhereInput
    orderBy?: Enumerable<ContentOrderByWithAggregationInput>
    by: Array<ContentScalarFieldEnum>
    having?: ContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContentCountAggregateInputType | true
    _avg?: ContentAvgAggregateInputType
    _sum?: ContentSumAggregateInputType
    _min?: ContentMinAggregateInputType
    _max?: ContentMaxAggregateInputType
  }


  export type ContentGroupByOutputType = {
    id: number
    markdownText: string
    plainText: string
    date: Date
    linkedEntity: LinkedEntity
    linkedEntityId: number
    _count: ContentCountAggregateOutputType | null
    _avg: ContentAvgAggregateOutputType | null
    _sum: ContentSumAggregateOutputType | null
    _min: ContentMinAggregateOutputType | null
    _max: ContentMaxAggregateOutputType | null
  }

  type GetContentGroupByPayload<T extends ContentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContentGroupByOutputType[P]>
            : GetScalarType<T[P], ContentGroupByOutputType[P]>
        }
      >
    >


  export type ContentSelect = {
    id?: boolean
    markdownText?: boolean
    plainText?: boolean
    date?: boolean
    linkedEntity?: boolean
    linkedEntityId?: boolean
  }


  export type ContentGetPayload<S extends boolean | null | undefined | ContentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Content :
    S extends undefined ? never :
    S extends { include: any } & (ContentArgs | ContentFindManyArgs)
    ? Content 
    : S extends { select: any } & (ContentArgs | ContentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Content ? Content[P] : never
  } 
      : Content


  type ContentCountArgs = Merge<
    Omit<ContentFindManyArgs, 'select' | 'include'> & {
      select?: ContentCountAggregateInputType | true
    }
  >

  export interface ContentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Content that matches the filter.
     * @param {ContentFindUniqueArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ContentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ContentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Content'> extends True ? Prisma__ContentClient<ContentGetPayload<T>> : Prisma__ContentClient<ContentGetPayload<T> | null, null>

    /**
     * Find one Content that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ContentFindUniqueOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ContentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ContentFindUniqueOrThrowArgs>
    ): Prisma__ContentClient<ContentGetPayload<T>>

    /**
     * Find the first Content that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ContentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ContentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Content'> extends True ? Prisma__ContentClient<ContentGetPayload<T>> : Prisma__ContentClient<ContentGetPayload<T> | null, null>

    /**
     * Find the first Content that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindFirstOrThrowArgs} args - Arguments to find a Content
     * @example
     * // Get one Content
     * const content = await prisma.content.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ContentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ContentFindFirstOrThrowArgs>
    ): Prisma__ContentClient<ContentGetPayload<T>>

    /**
     * Find zero or more Contents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contents
     * const contents = await prisma.content.findMany()
     * 
     * // Get first 10 Contents
     * const contents = await prisma.content.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contentWithIdOnly = await prisma.content.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ContentFindManyArgs>(
      args?: SelectSubset<T, ContentFindManyArgs>
    ): PrismaPromise<Array<ContentGetPayload<T>>>

    /**
     * Create a Content.
     * @param {ContentCreateArgs} args - Arguments to create a Content.
     * @example
     * // Create one Content
     * const Content = await prisma.content.create({
     *   data: {
     *     // ... data to create a Content
     *   }
     * })
     * 
    **/
    create<T extends ContentCreateArgs>(
      args: SelectSubset<T, ContentCreateArgs>
    ): Prisma__ContentClient<ContentGetPayload<T>>

    /**
     * Create many Contents.
     *     @param {ContentCreateManyArgs} args - Arguments to create many Contents.
     *     @example
     *     // Create many Contents
     *     const content = await prisma.content.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ContentCreateManyArgs>(
      args?: SelectSubset<T, ContentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Content.
     * @param {ContentDeleteArgs} args - Arguments to delete one Content.
     * @example
     * // Delete one Content
     * const Content = await prisma.content.delete({
     *   where: {
     *     // ... filter to delete one Content
     *   }
     * })
     * 
    **/
    delete<T extends ContentDeleteArgs>(
      args: SelectSubset<T, ContentDeleteArgs>
    ): Prisma__ContentClient<ContentGetPayload<T>>

    /**
     * Update one Content.
     * @param {ContentUpdateArgs} args - Arguments to update one Content.
     * @example
     * // Update one Content
     * const content = await prisma.content.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContentUpdateArgs>(
      args: SelectSubset<T, ContentUpdateArgs>
    ): Prisma__ContentClient<ContentGetPayload<T>>

    /**
     * Delete zero or more Contents.
     * @param {ContentDeleteManyArgs} args - Arguments to filter Contents to delete.
     * @example
     * // Delete a few Contents
     * const { count } = await prisma.content.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContentDeleteManyArgs>(
      args?: SelectSubset<T, ContentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contents
     * const content = await prisma.content.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContentUpdateManyArgs>(
      args: SelectSubset<T, ContentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Content.
     * @param {ContentUpsertArgs} args - Arguments to update or create a Content.
     * @example
     * // Update or create a Content
     * const content = await prisma.content.upsert({
     *   create: {
     *     // ... data to create a Content
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Content we want to update
     *   }
     * })
    **/
    upsert<T extends ContentUpsertArgs>(
      args: SelectSubset<T, ContentUpsertArgs>
    ): Prisma__ContentClient<ContentGetPayload<T>>

    /**
     * Count the number of Contents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentCountArgs} args - Arguments to filter Contents to count.
     * @example
     * // Count the number of Contents
     * const count = await prisma.content.count({
     *   where: {
     *     // ... the filter for the Contents we want to count
     *   }
     * })
    **/
    count<T extends ContentCountArgs>(
      args?: Subset<T, ContentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContentAggregateArgs>(args: Subset<T, ContentAggregateArgs>): PrismaPromise<GetContentAggregateType<T>>

    /**
     * Group by Content.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContentGroupByArgs['orderBy'] }
        : { orderBy?: ContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Content.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Content base type for findUnique actions
   */
  export type ContentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Filter, which Content to fetch.
     * 
    **/
    where: ContentWhereUniqueInput
  }

  /**
   * Content: findUnique
   */
  export interface ContentFindUniqueArgs extends ContentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Content findUniqueOrThrow
   */
  export type ContentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Filter, which Content to fetch.
     * 
    **/
    where: ContentWhereUniqueInput
  }


  /**
   * Content base type for findFirst actions
   */
  export type ContentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Filter, which Content to fetch.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     * 
    **/
    distinct?: Enumerable<ContentScalarFieldEnum>
  }

  /**
   * Content: findFirst
   */
  export interface ContentFindFirstArgs extends ContentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Content findFirstOrThrow
   */
  export type ContentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Filter, which Content to fetch.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contents.
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contents.
     * 
    **/
    distinct?: Enumerable<ContentScalarFieldEnum>
  }


  /**
   * Content findMany
   */
  export type ContentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Filter, which Contents to fetch.
     * 
    **/
    where?: ContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contents to fetch.
     * 
    **/
    orderBy?: Enumerable<ContentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contents.
     * 
    **/
    cursor?: ContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContentScalarFieldEnum>
  }


  /**
   * Content create
   */
  export type ContentCreateArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * The data needed to create a Content.
     * 
    **/
    data: XOR<ContentCreateInput, ContentUncheckedCreateInput>
  }


  /**
   * Content createMany
   */
  export type ContentCreateManyArgs = {
    /**
     * The data used to create many Contents.
     * 
    **/
    data: Enumerable<ContentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Content update
   */
  export type ContentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * The data needed to update a Content.
     * 
    **/
    data: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
    /**
     * Choose, which Content to update.
     * 
    **/
    where: ContentWhereUniqueInput
  }


  /**
   * Content updateMany
   */
  export type ContentUpdateManyArgs = {
    /**
     * The data used to update Contents.
     * 
    **/
    data: XOR<ContentUpdateManyMutationInput, ContentUncheckedUpdateManyInput>
    /**
     * Filter which Contents to update
     * 
    **/
    where?: ContentWhereInput
  }


  /**
   * Content upsert
   */
  export type ContentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * The filter to search for the Content to update in case it exists.
     * 
    **/
    where: ContentWhereUniqueInput
    /**
     * In case the Content found by the `where` argument doesn't exist, create a new Content with this data.
     * 
    **/
    create: XOR<ContentCreateInput, ContentUncheckedCreateInput>
    /**
     * In case the Content was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ContentUpdateInput, ContentUncheckedUpdateInput>
  }


  /**
   * Content delete
   */
  export type ContentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
    /**
     * Filter which Content to delete.
     * 
    **/
    where: ContentWhereUniqueInput
  }


  /**
   * Content deleteMany
   */
  export type ContentDeleteManyArgs = {
    /**
     * Filter which Contents to delete
     * 
    **/
    where?: ContentWhereInput
  }


  /**
   * Content without action
   */
  export type ContentArgs = {
    /**
     * Select specific fields to fetch from the Content
     * 
    **/
    select?: ContentSelect | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    linkedEntityId: number | null
    contentId: number | null
    ownerId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    linkedEntityId: number | null
    contentId: number | null
    ownerId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    title: string | null
    Date: Date | null
    linkedEntity: LinkedEntity | null
    linkedEntityId: number | null
    contentId: number | null
    ownerId: number | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    title: string | null
    Date: Date | null
    linkedEntity: LinkedEntity | null
    linkedEntityId: number | null
    contentId: number | null
    ownerId: number | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    Date: number
    linkedEntity: number
    linkedEntityId: number
    contentId: number
    ownerId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    linkedEntityId?: true
    contentId?: true
    ownerId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    linkedEntityId?: true
    contentId?: true
    ownerId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    Date?: true
    linkedEntity?: true
    linkedEntityId?: true
    contentId?: true
    ownerId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    Date?: true
    linkedEntity?: true
    linkedEntityId?: true
    contentId?: true
    ownerId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    Date?: true
    linkedEntity?: true
    linkedEntityId?: true
    contentId?: true
    ownerId?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: Array<PostScalarFieldEnum>
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    title: string
    Date: Date
    linkedEntity: LinkedEntity
    linkedEntityId: number
    contentId: number
    ownerId: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    title?: boolean
    Date?: boolean
    linkedEntity?: boolean
    linkedEntityId?: boolean
    contentId?: boolean
    ownerId?: boolean
  }


  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = Merge<
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }
  >

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }

  /**
   * Post: findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post: findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Filter, which Post to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     * 
    **/
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Filter, which Posts to fetch.
     * 
    **/
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     * 
    **/
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     * 
    **/
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * The data needed to create a Post.
     * 
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     * 
    **/
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * The data needed to update a Post.
     * 
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     * 
    **/
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * The filter to search for the Post to update in case it exists.
     * 
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     * 
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
    /**
     * Filter which Post to delete.
     * 
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     * 
    **/
    where?: PostWhereInput
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     * 
    **/
    select?: PostSelect | null
  }



  /**
   * Model Enrollment
   */


  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentAvgAggregateOutputType = {
    userId: number | null
    subjectId: number | null
  }

  export type EnrollmentSumAggregateOutputType = {
    userId: number | null
    subjectId: number | null
  }

  export type EnrollmentMinAggregateOutputType = {
    userId: number | null
    subjectId: number | null
    enrollmentDate: Date | null
    roleTitle: Role | null
    status: Status | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    userId: number | null
    subjectId: number | null
    enrollmentDate: Date | null
    roleTitle: Role | null
    status: Status | null
  }

  export type EnrollmentCountAggregateOutputType = {
    userId: number
    subjectId: number
    enrollmentDate: number
    roleTitle: number
    status: number
    _all: number
  }


  export type EnrollmentAvgAggregateInputType = {
    userId?: true
    subjectId?: true
  }

  export type EnrollmentSumAggregateInputType = {
    userId?: true
    subjectId?: true
  }

  export type EnrollmentMinAggregateInputType = {
    userId?: true
    subjectId?: true
    enrollmentDate?: true
    roleTitle?: true
    status?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    userId?: true
    subjectId?: true
    enrollmentDate?: true
    roleTitle?: true
    status?: true
  }

  export type EnrollmentCountAggregateInputType = {
    userId?: true
    subjectId?: true
    enrollmentDate?: true
    roleTitle?: true
    status?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs = {
    /**
     * Filter which Enrollment to aggregate.
     * 
    **/
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs = {
    where?: EnrollmentWhereInput
    orderBy?: Enumerable<EnrollmentOrderByWithAggregationInput>
    by: Array<EnrollmentScalarFieldEnum>
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _avg?: EnrollmentAvgAggregateInputType
    _sum?: EnrollmentSumAggregateInputType
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }


  export type EnrollmentGroupByOutputType = {
    userId: number
    subjectId: number
    enrollmentDate: Date
    roleTitle: Role
    status: Status
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect = {
    user?: boolean | UserArgs
    userId?: boolean
    subject?: boolean | SubjectArgs
    subjectId?: boolean
    enrollmentDate?: boolean
    roleTitle?: boolean
    status?: boolean
  }


  export type EnrollmentInclude = {
    user?: boolean | UserArgs
    subject?: boolean | SubjectArgs
  } 

  export type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Enrollment :
    S extends undefined ? never :
    S extends { include: any } & (EnrollmentArgs | EnrollmentFindManyArgs)
    ? Enrollment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'subject' ? SubjectGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EnrollmentArgs | EnrollmentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'subject' ? SubjectGetPayload<S['select'][P]> :  P extends keyof Enrollment ? Enrollment[P] : never
  } 
      : Enrollment


  type EnrollmentCountArgs = Merge<
    Omit<EnrollmentFindManyArgs, 'select' | 'include'> & {
      select?: EnrollmentCountAggregateInputType | true
    }
  >

  export interface EnrollmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EnrollmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EnrollmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Enrollment'> extends True ? Prisma__EnrollmentClient<EnrollmentGetPayload<T>> : Prisma__EnrollmentClient<EnrollmentGetPayload<T> | null, null>

    /**
     * Find one Enrollment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EnrollmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EnrollmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Enrollment'> extends True ? Prisma__EnrollmentClient<EnrollmentGetPayload<T>> : Prisma__EnrollmentClient<EnrollmentGetPayload<T> | null, null>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const enrollmentWithUserIdOnly = await prisma.enrollment.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends EnrollmentFindManyArgs>(
      args?: SelectSubset<T, EnrollmentFindManyArgs>
    ): PrismaPromise<Array<EnrollmentGetPayload<T>>>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
    **/
    create<T extends EnrollmentCreateArgs>(
      args: SelectSubset<T, EnrollmentCreateArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Create many Enrollments.
     *     @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     *     @example
     *     // Create many Enrollments
     *     const enrollment = await prisma.enrollment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EnrollmentCreateManyArgs>(
      args?: SelectSubset<T, EnrollmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
    **/
    delete<T extends EnrollmentDeleteArgs>(
      args: SelectSubset<T, EnrollmentDeleteArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EnrollmentUpdateArgs>(
      args: SelectSubset<T, EnrollmentUpdateArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EnrollmentDeleteManyArgs>(
      args?: SelectSubset<T, EnrollmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EnrollmentUpdateManyArgs>(
      args: SelectSubset<T, EnrollmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
    **/
    upsert<T extends EnrollmentUpsertArgs>(
      args: SelectSubset<T, EnrollmentUpsertArgs>
    ): Prisma__EnrollmentClient<EnrollmentGetPayload<T>>

    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EnrollmentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    subject<T extends SubjectArgs= {}>(args?: Subset<T, SubjectArgs>): Prisma__SubjectClient<SubjectGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Enrollment base type for findUnique actions
   */
  export type EnrollmentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     * 
    **/
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment: findUnique
   */
  export interface EnrollmentFindUniqueArgs extends EnrollmentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     * 
    **/
    where: EnrollmentWhereUniqueInput
  }


  /**
   * Enrollment base type for findFirst actions
   */
  export type EnrollmentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     * 
    **/
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     * 
    **/
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     * 
    **/
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }

  /**
   * Enrollment: findFirst
   */
  export interface EnrollmentFindFirstArgs extends EnrollmentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollment to fetch.
     * 
    **/
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     * 
    **/
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     * 
    **/
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }


  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * Filter, which Enrollments to fetch.
     * 
    **/
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     * 
    **/
    orderBy?: Enumerable<EnrollmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     * 
    **/
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EnrollmentScalarFieldEnum>
  }


  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * The data needed to create a Enrollment.
     * 
    **/
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }


  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs = {
    /**
     * The data used to create many Enrollments.
     * 
    **/
    data: Enumerable<EnrollmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * The data needed to update a Enrollment.
     * 
    **/
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     * 
    **/
    where: EnrollmentWhereUniqueInput
  }


  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs = {
    /**
     * The data used to update Enrollments.
     * 
    **/
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     * 
    **/
    where?: EnrollmentWhereInput
  }


  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     * 
    **/
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     * 
    **/
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }


  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
    /**
     * Filter which Enrollment to delete.
     * 
    **/
    where: EnrollmentWhereUniqueInput
  }


  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs = {
    /**
     * Filter which Enrollments to delete
     * 
    **/
    where?: EnrollmentWhereInput
  }


  /**
   * Enrollment without action
   */
  export type EnrollmentArgs = {
    /**
     * Select specific fields to fetch from the Enrollment
     * 
    **/
    select?: EnrollmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EnrollmentInclude | null
  }



  /**
   * Model Seminar
   */


  export type AggregateSeminar = {
    _count: SeminarCountAggregateOutputType | null
    _avg: SeminarAvgAggregateOutputType | null
    _sum: SeminarSumAggregateOutputType | null
    _min: SeminarMinAggregateOutputType | null
    _max: SeminarMaxAggregateOutputType | null
  }

  export type SeminarAvgAggregateOutputType = {
    id: number | null
    mentorId: number | null
  }

  export type SeminarSumAggregateOutputType = {
    id: number | null
    mentorId: number | null
  }

  export type SeminarMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    mentorId: number | null
    type: string | null
    contentId: string | null
    subjectId: string | null
    userId: string | null
  }

  export type SeminarMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    mentorId: number | null
    type: string | null
    contentId: string | null
    subjectId: string | null
    userId: string | null
  }

  export type SeminarCountAggregateOutputType = {
    id: number
    title: number
    description: number
    mentorId: number
    type: number
    contentId: number
    subjectId: number
    userId: number
    _all: number
  }


  export type SeminarAvgAggregateInputType = {
    id?: true
    mentorId?: true
  }

  export type SeminarSumAggregateInputType = {
    id?: true
    mentorId?: true
  }

  export type SeminarMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    mentorId?: true
    type?: true
    contentId?: true
    subjectId?: true
    userId?: true
  }

  export type SeminarMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    mentorId?: true
    type?: true
    contentId?: true
    subjectId?: true
    userId?: true
  }

  export type SeminarCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    mentorId?: true
    type?: true
    contentId?: true
    subjectId?: true
    userId?: true
    _all?: true
  }

  export type SeminarAggregateArgs = {
    /**
     * Filter which Seminar to aggregate.
     * 
    **/
    where?: SeminarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seminars to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SeminarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seminars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seminars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seminars
    **/
    _count?: true | SeminarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeminarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeminarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeminarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeminarMaxAggregateInputType
  }

  export type GetSeminarAggregateType<T extends SeminarAggregateArgs> = {
        [P in keyof T & keyof AggregateSeminar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeminar[P]>
      : GetScalarType<T[P], AggregateSeminar[P]>
  }




  export type SeminarGroupByArgs = {
    where?: SeminarWhereInput
    orderBy?: Enumerable<SeminarOrderByWithAggregationInput>
    by: Array<SeminarScalarFieldEnum>
    having?: SeminarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeminarCountAggregateInputType | true
    _avg?: SeminarAvgAggregateInputType
    _sum?: SeminarSumAggregateInputType
    _min?: SeminarMinAggregateInputType
    _max?: SeminarMaxAggregateInputType
  }


  export type SeminarGroupByOutputType = {
    id: number
    title: string
    description: string
    mentorId: number
    type: string
    contentId: string
    subjectId: string
    userId: string
    _count: SeminarCountAggregateOutputType | null
    _avg: SeminarAvgAggregateOutputType | null
    _sum: SeminarSumAggregateOutputType | null
    _min: SeminarMinAggregateOutputType | null
    _max: SeminarMaxAggregateOutputType | null
  }

  type GetSeminarGroupByPayload<T extends SeminarGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SeminarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeminarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeminarGroupByOutputType[P]>
            : GetScalarType<T[P], SeminarGroupByOutputType[P]>
        }
      >
    >


  export type SeminarSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    mentorId?: boolean
    type?: boolean
    contentId?: boolean
    subjectId?: boolean
    userId?: boolean
  }


  export type SeminarGetPayload<S extends boolean | null | undefined | SeminarArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Seminar :
    S extends undefined ? never :
    S extends { include: any } & (SeminarArgs | SeminarFindManyArgs)
    ? Seminar 
    : S extends { select: any } & (SeminarArgs | SeminarFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Seminar ? Seminar[P] : never
  } 
      : Seminar


  type SeminarCountArgs = Merge<
    Omit<SeminarFindManyArgs, 'select' | 'include'> & {
      select?: SeminarCountAggregateInputType | true
    }
  >

  export interface SeminarDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Seminar that matches the filter.
     * @param {SeminarFindUniqueArgs} args - Arguments to find a Seminar
     * @example
     * // Get one Seminar
     * const seminar = await prisma.seminar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeminarFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SeminarFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Seminar'> extends True ? Prisma__SeminarClient<SeminarGetPayload<T>> : Prisma__SeminarClient<SeminarGetPayload<T> | null, null>

    /**
     * Find one Seminar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeminarFindUniqueOrThrowArgs} args - Arguments to find a Seminar
     * @example
     * // Get one Seminar
     * const seminar = await prisma.seminar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeminarFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SeminarFindUniqueOrThrowArgs>
    ): Prisma__SeminarClient<SeminarGetPayload<T>>

    /**
     * Find the first Seminar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarFindFirstArgs} args - Arguments to find a Seminar
     * @example
     * // Get one Seminar
     * const seminar = await prisma.seminar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeminarFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SeminarFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Seminar'> extends True ? Prisma__SeminarClient<SeminarGetPayload<T>> : Prisma__SeminarClient<SeminarGetPayload<T> | null, null>

    /**
     * Find the first Seminar that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarFindFirstOrThrowArgs} args - Arguments to find a Seminar
     * @example
     * // Get one Seminar
     * const seminar = await prisma.seminar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeminarFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SeminarFindFirstOrThrowArgs>
    ): Prisma__SeminarClient<SeminarGetPayload<T>>

    /**
     * Find zero or more Seminars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seminars
     * const seminars = await prisma.seminar.findMany()
     * 
     * // Get first 10 Seminars
     * const seminars = await prisma.seminar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seminarWithIdOnly = await prisma.seminar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeminarFindManyArgs>(
      args?: SelectSubset<T, SeminarFindManyArgs>
    ): PrismaPromise<Array<SeminarGetPayload<T>>>

    /**
     * Create a Seminar.
     * @param {SeminarCreateArgs} args - Arguments to create a Seminar.
     * @example
     * // Create one Seminar
     * const Seminar = await prisma.seminar.create({
     *   data: {
     *     // ... data to create a Seminar
     *   }
     * })
     * 
    **/
    create<T extends SeminarCreateArgs>(
      args: SelectSubset<T, SeminarCreateArgs>
    ): Prisma__SeminarClient<SeminarGetPayload<T>>

    /**
     * Create many Seminars.
     *     @param {SeminarCreateManyArgs} args - Arguments to create many Seminars.
     *     @example
     *     // Create many Seminars
     *     const seminar = await prisma.seminar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeminarCreateManyArgs>(
      args?: SelectSubset<T, SeminarCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Seminar.
     * @param {SeminarDeleteArgs} args - Arguments to delete one Seminar.
     * @example
     * // Delete one Seminar
     * const Seminar = await prisma.seminar.delete({
     *   where: {
     *     // ... filter to delete one Seminar
     *   }
     * })
     * 
    **/
    delete<T extends SeminarDeleteArgs>(
      args: SelectSubset<T, SeminarDeleteArgs>
    ): Prisma__SeminarClient<SeminarGetPayload<T>>

    /**
     * Update one Seminar.
     * @param {SeminarUpdateArgs} args - Arguments to update one Seminar.
     * @example
     * // Update one Seminar
     * const seminar = await prisma.seminar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeminarUpdateArgs>(
      args: SelectSubset<T, SeminarUpdateArgs>
    ): Prisma__SeminarClient<SeminarGetPayload<T>>

    /**
     * Delete zero or more Seminars.
     * @param {SeminarDeleteManyArgs} args - Arguments to filter Seminars to delete.
     * @example
     * // Delete a few Seminars
     * const { count } = await prisma.seminar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeminarDeleteManyArgs>(
      args?: SelectSubset<T, SeminarDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seminars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seminars
     * const seminar = await prisma.seminar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeminarUpdateManyArgs>(
      args: SelectSubset<T, SeminarUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Seminar.
     * @param {SeminarUpsertArgs} args - Arguments to update or create a Seminar.
     * @example
     * // Update or create a Seminar
     * const seminar = await prisma.seminar.upsert({
     *   create: {
     *     // ... data to create a Seminar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seminar we want to update
     *   }
     * })
    **/
    upsert<T extends SeminarUpsertArgs>(
      args: SelectSubset<T, SeminarUpsertArgs>
    ): Prisma__SeminarClient<SeminarGetPayload<T>>

    /**
     * Count the number of Seminars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarCountArgs} args - Arguments to filter Seminars to count.
     * @example
     * // Count the number of Seminars
     * const count = await prisma.seminar.count({
     *   where: {
     *     // ... the filter for the Seminars we want to count
     *   }
     * })
    **/
    count<T extends SeminarCountArgs>(
      args?: Subset<T, SeminarCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeminarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seminar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeminarAggregateArgs>(args: Subset<T, SeminarAggregateArgs>): PrismaPromise<GetSeminarAggregateType<T>>

    /**
     * Group by Seminar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeminarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeminarGroupByArgs['orderBy'] }
        : { orderBy?: SeminarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeminarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeminarGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Seminar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SeminarClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Seminar base type for findUnique actions
   */
  export type SeminarFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * Filter, which Seminar to fetch.
     * 
    **/
    where: SeminarWhereUniqueInput
  }

  /**
   * Seminar: findUnique
   */
  export interface SeminarFindUniqueArgs extends SeminarFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Seminar findUniqueOrThrow
   */
  export type SeminarFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * Filter, which Seminar to fetch.
     * 
    **/
    where: SeminarWhereUniqueInput
  }


  /**
   * Seminar base type for findFirst actions
   */
  export type SeminarFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * Filter, which Seminar to fetch.
     * 
    **/
    where?: SeminarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seminars to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seminars.
     * 
    **/
    cursor?: SeminarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seminars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seminars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seminars.
     * 
    **/
    distinct?: Enumerable<SeminarScalarFieldEnum>
  }

  /**
   * Seminar: findFirst
   */
  export interface SeminarFindFirstArgs extends SeminarFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Seminar findFirstOrThrow
   */
  export type SeminarFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * Filter, which Seminar to fetch.
     * 
    **/
    where?: SeminarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seminars to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seminars.
     * 
    **/
    cursor?: SeminarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seminars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seminars.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seminars.
     * 
    **/
    distinct?: Enumerable<SeminarScalarFieldEnum>
  }


  /**
   * Seminar findMany
   */
  export type SeminarFindManyArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * Filter, which Seminars to fetch.
     * 
    **/
    where?: SeminarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seminars to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seminars.
     * 
    **/
    cursor?: SeminarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seminars from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seminars.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SeminarScalarFieldEnum>
  }


  /**
   * Seminar create
   */
  export type SeminarCreateArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * The data needed to create a Seminar.
     * 
    **/
    data: XOR<SeminarCreateInput, SeminarUncheckedCreateInput>
  }


  /**
   * Seminar createMany
   */
  export type SeminarCreateManyArgs = {
    /**
     * The data used to create many Seminars.
     * 
    **/
    data: Enumerable<SeminarCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Seminar update
   */
  export type SeminarUpdateArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * The data needed to update a Seminar.
     * 
    **/
    data: XOR<SeminarUpdateInput, SeminarUncheckedUpdateInput>
    /**
     * Choose, which Seminar to update.
     * 
    **/
    where: SeminarWhereUniqueInput
  }


  /**
   * Seminar updateMany
   */
  export type SeminarUpdateManyArgs = {
    /**
     * The data used to update Seminars.
     * 
    **/
    data: XOR<SeminarUpdateManyMutationInput, SeminarUncheckedUpdateManyInput>
    /**
     * Filter which Seminars to update
     * 
    **/
    where?: SeminarWhereInput
  }


  /**
   * Seminar upsert
   */
  export type SeminarUpsertArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * The filter to search for the Seminar to update in case it exists.
     * 
    **/
    where: SeminarWhereUniqueInput
    /**
     * In case the Seminar found by the `where` argument doesn't exist, create a new Seminar with this data.
     * 
    **/
    create: XOR<SeminarCreateInput, SeminarUncheckedCreateInput>
    /**
     * In case the Seminar was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SeminarUpdateInput, SeminarUncheckedUpdateInput>
  }


  /**
   * Seminar delete
   */
  export type SeminarDeleteArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
    /**
     * Filter which Seminar to delete.
     * 
    **/
    where: SeminarWhereUniqueInput
  }


  /**
   * Seminar deleteMany
   */
  export type SeminarDeleteManyArgs = {
    /**
     * Filter which Seminars to delete
     * 
    **/
    where?: SeminarWhereInput
  }


  /**
   * Seminar without action
   */
  export type SeminarArgs = {
    /**
     * Select specific fields to fetch from the Seminar
     * 
    **/
    select?: SeminarSelect | null
  }



  /**
   * Model Event
   */


  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    linkedEntity: string | null
    linkedEntityId: string | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    linkedEntity: string | null
    linkedEntityId: string | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    title: number
    description: number
    linkedEntity: number
    linkedEntityId: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    linkedEntity?: true
    linkedEntityId?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    linkedEntity?: true
    linkedEntityId?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    linkedEntity?: true
    linkedEntityId?: true
    _all?: true
  }

  export type EventAggregateArgs = {
    /**
     * Filter which Event to aggregate.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs = {
    where?: EventWhereInput
    orderBy?: Enumerable<EventOrderByWithAggregationInput>
    by: Array<EventScalarFieldEnum>
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }


  export type EventGroupByOutputType = {
    id: number
    title: string
    description: string
    linkedEntity: string
    linkedEntityId: string
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    linkedEntity?: boolean
    linkedEntityId?: boolean
  }


  export type EventGetPayload<S extends boolean | null | undefined | EventArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Event :
    S extends undefined ? never :
    S extends { include: any } & (EventArgs | EventFindManyArgs)
    ? Event 
    : S extends { select: any } & (EventArgs | EventFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Event ? Event[P] : never
  } 
      : Event


  type EventCountArgs = Merge<
    Omit<EventFindManyArgs, 'select' | 'include'> & {
      select?: EventCountAggregateInputType | true
    }
  >

  export interface EventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Event'> extends True ? Prisma__EventClient<EventGetPayload<T>> : Prisma__EventClient<EventGetPayload<T> | null, null>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Event'> extends True ? Prisma__EventClient<EventGetPayload<T>> : Prisma__EventClient<EventGetPayload<T> | null, null>

    /**
     * Find the first Event that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs>(
      args?: SelectSubset<T, EventFindManyArgs>
    ): PrismaPromise<Array<EventGetPayload<T>>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs>(
      args: SelectSubset<T, EventCreateArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs>(
      args?: SelectSubset<T, EventCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs>(
      args: SelectSubset<T, EventDeleteArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs>(
      args: SelectSubset<T, EventUpdateArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs>(
      args?: SelectSubset<T, EventDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs>(
      args: SelectSubset<T, EventUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs>(
      args: SelectSubset<T, EventUpsertArgs>
    ): Prisma__EventClient<EventGetPayload<T>>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Event base type for findUnique actions
   */
  export type EventFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Filter, which Event to fetch.
     * 
    **/
    where: EventWhereUniqueInput
  }

  /**
   * Event: findUnique
   */
  export interface EventFindUniqueArgs extends EventFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Filter, which Event to fetch.
     * 
    **/
    where: EventWhereUniqueInput
  }


  /**
   * Event base type for findFirst actions
   */
  export type EventFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Filter, which Event to fetch.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     * 
    **/
    distinct?: Enumerable<EventScalarFieldEnum>
  }

  /**
   * Event: findFirst
   */
  export interface EventFindFirstArgs extends EventFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Filter, which Event to fetch.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     * 
    **/
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Filter, which Events to fetch.
     * 
    **/
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     * 
    **/
    orderBy?: Enumerable<EventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     * 
    **/
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EventScalarFieldEnum>
  }


  /**
   * Event create
   */
  export type EventCreateArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * The data needed to create a Event.
     * 
    **/
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs = {
    /**
     * The data used to create many Events.
     * 
    **/
    data: Enumerable<EventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * The data needed to update a Event.
     * 
    **/
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     * 
    **/
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs = {
    /**
     * The data used to update Events.
     * 
    **/
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     * 
    **/
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * The filter to search for the Event to update in case it exists.
     * 
    **/
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     * 
    **/
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
    /**
     * Filter which Event to delete.
     * 
    **/
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs = {
    /**
     * Filter which Events to delete
     * 
    **/
    where?: EventWhereInput
  }


  /**
   * Event without action
   */
  export type EventArgs = {
    /**
     * Select specific fields to fetch from the Event
     * 
    **/
    select?: EventSelect | null
  }



  /**
   * Model SeminarSuggestion
   */


  export type AggregateSeminarSuggestion = {
    _count: SeminarSuggestionCountAggregateOutputType | null
    _avg: SeminarSuggestionAvgAggregateOutputType | null
    _sum: SeminarSuggestionSumAggregateOutputType | null
    _min: SeminarSuggestionMinAggregateOutputType | null
    _max: SeminarSuggestionMaxAggregateOutputType | null
  }

  export type SeminarSuggestionAvgAggregateOutputType = {
    id: number | null
    seminarId: number | null
    subjectId: number | null
  }

  export type SeminarSuggestionSumAggregateOutputType = {
    id: number | null
    seminarId: number | null
    subjectId: number | null
  }

  export type SeminarSuggestionMinAggregateOutputType = {
    id: number | null
    seminarId: number | null
    subjectId: number | null
  }

  export type SeminarSuggestionMaxAggregateOutputType = {
    id: number | null
    seminarId: number | null
    subjectId: number | null
  }

  export type SeminarSuggestionCountAggregateOutputType = {
    id: number
    seminarId: number
    subjectId: number
    _all: number
  }


  export type SeminarSuggestionAvgAggregateInputType = {
    id?: true
    seminarId?: true
    subjectId?: true
  }

  export type SeminarSuggestionSumAggregateInputType = {
    id?: true
    seminarId?: true
    subjectId?: true
  }

  export type SeminarSuggestionMinAggregateInputType = {
    id?: true
    seminarId?: true
    subjectId?: true
  }

  export type SeminarSuggestionMaxAggregateInputType = {
    id?: true
    seminarId?: true
    subjectId?: true
  }

  export type SeminarSuggestionCountAggregateInputType = {
    id?: true
    seminarId?: true
    subjectId?: true
    _all?: true
  }

  export type SeminarSuggestionAggregateArgs = {
    /**
     * Filter which SeminarSuggestion to aggregate.
     * 
    **/
    where?: SeminarSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeminarSuggestions to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarSuggestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SeminarSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeminarSuggestions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeminarSuggestions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeminarSuggestions
    **/
    _count?: true | SeminarSuggestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeminarSuggestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeminarSuggestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeminarSuggestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeminarSuggestionMaxAggregateInputType
  }

  export type GetSeminarSuggestionAggregateType<T extends SeminarSuggestionAggregateArgs> = {
        [P in keyof T & keyof AggregateSeminarSuggestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeminarSuggestion[P]>
      : GetScalarType<T[P], AggregateSeminarSuggestion[P]>
  }




  export type SeminarSuggestionGroupByArgs = {
    where?: SeminarSuggestionWhereInput
    orderBy?: Enumerable<SeminarSuggestionOrderByWithAggregationInput>
    by: Array<SeminarSuggestionScalarFieldEnum>
    having?: SeminarSuggestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeminarSuggestionCountAggregateInputType | true
    _avg?: SeminarSuggestionAvgAggregateInputType
    _sum?: SeminarSuggestionSumAggregateInputType
    _min?: SeminarSuggestionMinAggregateInputType
    _max?: SeminarSuggestionMaxAggregateInputType
  }


  export type SeminarSuggestionGroupByOutputType = {
    id: number
    seminarId: number
    subjectId: number
    _count: SeminarSuggestionCountAggregateOutputType | null
    _avg: SeminarSuggestionAvgAggregateOutputType | null
    _sum: SeminarSuggestionSumAggregateOutputType | null
    _min: SeminarSuggestionMinAggregateOutputType | null
    _max: SeminarSuggestionMaxAggregateOutputType | null
  }

  type GetSeminarSuggestionGroupByPayload<T extends SeminarSuggestionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SeminarSuggestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeminarSuggestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeminarSuggestionGroupByOutputType[P]>
            : GetScalarType<T[P], SeminarSuggestionGroupByOutputType[P]>
        }
      >
    >


  export type SeminarSuggestionSelect = {
    id?: boolean
    seminarId?: boolean
    subjectId?: boolean
  }


  export type SeminarSuggestionGetPayload<S extends boolean | null | undefined | SeminarSuggestionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SeminarSuggestion :
    S extends undefined ? never :
    S extends { include: any } & (SeminarSuggestionArgs | SeminarSuggestionFindManyArgs)
    ? SeminarSuggestion 
    : S extends { select: any } & (SeminarSuggestionArgs | SeminarSuggestionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof SeminarSuggestion ? SeminarSuggestion[P] : never
  } 
      : SeminarSuggestion


  type SeminarSuggestionCountArgs = Merge<
    Omit<SeminarSuggestionFindManyArgs, 'select' | 'include'> & {
      select?: SeminarSuggestionCountAggregateInputType | true
    }
  >

  export interface SeminarSuggestionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one SeminarSuggestion that matches the filter.
     * @param {SeminarSuggestionFindUniqueArgs} args - Arguments to find a SeminarSuggestion
     * @example
     * // Get one SeminarSuggestion
     * const seminarSuggestion = await prisma.seminarSuggestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SeminarSuggestionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SeminarSuggestionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SeminarSuggestion'> extends True ? Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>> : Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T> | null, null>

    /**
     * Find one SeminarSuggestion that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SeminarSuggestionFindUniqueOrThrowArgs} args - Arguments to find a SeminarSuggestion
     * @example
     * // Get one SeminarSuggestion
     * const seminarSuggestion = await prisma.seminarSuggestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SeminarSuggestionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SeminarSuggestionFindUniqueOrThrowArgs>
    ): Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>>

    /**
     * Find the first SeminarSuggestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionFindFirstArgs} args - Arguments to find a SeminarSuggestion
     * @example
     * // Get one SeminarSuggestion
     * const seminarSuggestion = await prisma.seminarSuggestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SeminarSuggestionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SeminarSuggestionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SeminarSuggestion'> extends True ? Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>> : Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T> | null, null>

    /**
     * Find the first SeminarSuggestion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionFindFirstOrThrowArgs} args - Arguments to find a SeminarSuggestion
     * @example
     * // Get one SeminarSuggestion
     * const seminarSuggestion = await prisma.seminarSuggestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SeminarSuggestionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SeminarSuggestionFindFirstOrThrowArgs>
    ): Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>>

    /**
     * Find zero or more SeminarSuggestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeminarSuggestions
     * const seminarSuggestions = await prisma.seminarSuggestion.findMany()
     * 
     * // Get first 10 SeminarSuggestions
     * const seminarSuggestions = await prisma.seminarSuggestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seminarSuggestionWithIdOnly = await prisma.seminarSuggestion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SeminarSuggestionFindManyArgs>(
      args?: SelectSubset<T, SeminarSuggestionFindManyArgs>
    ): PrismaPromise<Array<SeminarSuggestionGetPayload<T>>>

    /**
     * Create a SeminarSuggestion.
     * @param {SeminarSuggestionCreateArgs} args - Arguments to create a SeminarSuggestion.
     * @example
     * // Create one SeminarSuggestion
     * const SeminarSuggestion = await prisma.seminarSuggestion.create({
     *   data: {
     *     // ... data to create a SeminarSuggestion
     *   }
     * })
     * 
    **/
    create<T extends SeminarSuggestionCreateArgs>(
      args: SelectSubset<T, SeminarSuggestionCreateArgs>
    ): Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>>

    /**
     * Create many SeminarSuggestions.
     *     @param {SeminarSuggestionCreateManyArgs} args - Arguments to create many SeminarSuggestions.
     *     @example
     *     // Create many SeminarSuggestions
     *     const seminarSuggestion = await prisma.seminarSuggestion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SeminarSuggestionCreateManyArgs>(
      args?: SelectSubset<T, SeminarSuggestionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SeminarSuggestion.
     * @param {SeminarSuggestionDeleteArgs} args - Arguments to delete one SeminarSuggestion.
     * @example
     * // Delete one SeminarSuggestion
     * const SeminarSuggestion = await prisma.seminarSuggestion.delete({
     *   where: {
     *     // ... filter to delete one SeminarSuggestion
     *   }
     * })
     * 
    **/
    delete<T extends SeminarSuggestionDeleteArgs>(
      args: SelectSubset<T, SeminarSuggestionDeleteArgs>
    ): Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>>

    /**
     * Update one SeminarSuggestion.
     * @param {SeminarSuggestionUpdateArgs} args - Arguments to update one SeminarSuggestion.
     * @example
     * // Update one SeminarSuggestion
     * const seminarSuggestion = await prisma.seminarSuggestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SeminarSuggestionUpdateArgs>(
      args: SelectSubset<T, SeminarSuggestionUpdateArgs>
    ): Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>>

    /**
     * Delete zero or more SeminarSuggestions.
     * @param {SeminarSuggestionDeleteManyArgs} args - Arguments to filter SeminarSuggestions to delete.
     * @example
     * // Delete a few SeminarSuggestions
     * const { count } = await prisma.seminarSuggestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SeminarSuggestionDeleteManyArgs>(
      args?: SelectSubset<T, SeminarSuggestionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeminarSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeminarSuggestions
     * const seminarSuggestion = await prisma.seminarSuggestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SeminarSuggestionUpdateManyArgs>(
      args: SelectSubset<T, SeminarSuggestionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SeminarSuggestion.
     * @param {SeminarSuggestionUpsertArgs} args - Arguments to update or create a SeminarSuggestion.
     * @example
     * // Update or create a SeminarSuggestion
     * const seminarSuggestion = await prisma.seminarSuggestion.upsert({
     *   create: {
     *     // ... data to create a SeminarSuggestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeminarSuggestion we want to update
     *   }
     * })
    **/
    upsert<T extends SeminarSuggestionUpsertArgs>(
      args: SelectSubset<T, SeminarSuggestionUpsertArgs>
    ): Prisma__SeminarSuggestionClient<SeminarSuggestionGetPayload<T>>

    /**
     * Count the number of SeminarSuggestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionCountArgs} args - Arguments to filter SeminarSuggestions to count.
     * @example
     * // Count the number of SeminarSuggestions
     * const count = await prisma.seminarSuggestion.count({
     *   where: {
     *     // ... the filter for the SeminarSuggestions we want to count
     *   }
     * })
    **/
    count<T extends SeminarSuggestionCountArgs>(
      args?: Subset<T, SeminarSuggestionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeminarSuggestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeminarSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeminarSuggestionAggregateArgs>(args: Subset<T, SeminarSuggestionAggregateArgs>): PrismaPromise<GetSeminarSuggestionAggregateType<T>>

    /**
     * Group by SeminarSuggestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeminarSuggestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeminarSuggestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeminarSuggestionGroupByArgs['orderBy'] }
        : { orderBy?: SeminarSuggestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeminarSuggestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeminarSuggestionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SeminarSuggestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SeminarSuggestionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SeminarSuggestion base type for findUnique actions
   */
  export type SeminarSuggestionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * Filter, which SeminarSuggestion to fetch.
     * 
    **/
    where: SeminarSuggestionWhereUniqueInput
  }

  /**
   * SeminarSuggestion: findUnique
   */
  export interface SeminarSuggestionFindUniqueArgs extends SeminarSuggestionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SeminarSuggestion findUniqueOrThrow
   */
  export type SeminarSuggestionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * Filter, which SeminarSuggestion to fetch.
     * 
    **/
    where: SeminarSuggestionWhereUniqueInput
  }


  /**
   * SeminarSuggestion base type for findFirst actions
   */
  export type SeminarSuggestionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * Filter, which SeminarSuggestion to fetch.
     * 
    **/
    where?: SeminarSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeminarSuggestions to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarSuggestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeminarSuggestions.
     * 
    **/
    cursor?: SeminarSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeminarSuggestions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeminarSuggestions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeminarSuggestions.
     * 
    **/
    distinct?: Enumerable<SeminarSuggestionScalarFieldEnum>
  }

  /**
   * SeminarSuggestion: findFirst
   */
  export interface SeminarSuggestionFindFirstArgs extends SeminarSuggestionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SeminarSuggestion findFirstOrThrow
   */
  export type SeminarSuggestionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * Filter, which SeminarSuggestion to fetch.
     * 
    **/
    where?: SeminarSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeminarSuggestions to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarSuggestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeminarSuggestions.
     * 
    **/
    cursor?: SeminarSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeminarSuggestions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeminarSuggestions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeminarSuggestions.
     * 
    **/
    distinct?: Enumerable<SeminarSuggestionScalarFieldEnum>
  }


  /**
   * SeminarSuggestion findMany
   */
  export type SeminarSuggestionFindManyArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * Filter, which SeminarSuggestions to fetch.
     * 
    **/
    where?: SeminarSuggestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeminarSuggestions to fetch.
     * 
    **/
    orderBy?: Enumerable<SeminarSuggestionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeminarSuggestions.
     * 
    **/
    cursor?: SeminarSuggestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeminarSuggestions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeminarSuggestions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SeminarSuggestionScalarFieldEnum>
  }


  /**
   * SeminarSuggestion create
   */
  export type SeminarSuggestionCreateArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * The data needed to create a SeminarSuggestion.
     * 
    **/
    data: XOR<SeminarSuggestionCreateInput, SeminarSuggestionUncheckedCreateInput>
  }


  /**
   * SeminarSuggestion createMany
   */
  export type SeminarSuggestionCreateManyArgs = {
    /**
     * The data used to create many SeminarSuggestions.
     * 
    **/
    data: Enumerable<SeminarSuggestionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SeminarSuggestion update
   */
  export type SeminarSuggestionUpdateArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * The data needed to update a SeminarSuggestion.
     * 
    **/
    data: XOR<SeminarSuggestionUpdateInput, SeminarSuggestionUncheckedUpdateInput>
    /**
     * Choose, which SeminarSuggestion to update.
     * 
    **/
    where: SeminarSuggestionWhereUniqueInput
  }


  /**
   * SeminarSuggestion updateMany
   */
  export type SeminarSuggestionUpdateManyArgs = {
    /**
     * The data used to update SeminarSuggestions.
     * 
    **/
    data: XOR<SeminarSuggestionUpdateManyMutationInput, SeminarSuggestionUncheckedUpdateManyInput>
    /**
     * Filter which SeminarSuggestions to update
     * 
    **/
    where?: SeminarSuggestionWhereInput
  }


  /**
   * SeminarSuggestion upsert
   */
  export type SeminarSuggestionUpsertArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * The filter to search for the SeminarSuggestion to update in case it exists.
     * 
    **/
    where: SeminarSuggestionWhereUniqueInput
    /**
     * In case the SeminarSuggestion found by the `where` argument doesn't exist, create a new SeminarSuggestion with this data.
     * 
    **/
    create: XOR<SeminarSuggestionCreateInput, SeminarSuggestionUncheckedCreateInput>
    /**
     * In case the SeminarSuggestion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SeminarSuggestionUpdateInput, SeminarSuggestionUncheckedUpdateInput>
  }


  /**
   * SeminarSuggestion delete
   */
  export type SeminarSuggestionDeleteArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
    /**
     * Filter which SeminarSuggestion to delete.
     * 
    **/
    where: SeminarSuggestionWhereUniqueInput
  }


  /**
   * SeminarSuggestion deleteMany
   */
  export type SeminarSuggestionDeleteManyArgs = {
    /**
     * Filter which SeminarSuggestions to delete
     * 
    **/
    where?: SeminarSuggestionWhereInput
  }


  /**
   * SeminarSuggestion without action
   */
  export type SeminarSuggestionArgs = {
    /**
     * Select specific fields to fetch from the SeminarSuggestion
     * 
    **/
    select?: SeminarSuggestionSelect | null
  }



  /**
   * Model Room
   */


  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    capacity: number | null
  }

  export type RoomSumAggregateOutputType = {
    capacity: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: string | null
    capacity: number | null
  }

  export type RoomMaxAggregateOutputType = {
    id: string | null
    capacity: number | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    capacity: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    capacity?: true
  }

  export type RoomSumAggregateInputType = {
    capacity?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    capacity?: true
    _all?: true
  }

  export type RoomAggregateArgs = {
    /**
     * Filter which Room to aggregate.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs = {
    where?: RoomWhereInput
    orderBy?: Enumerable<RoomOrderByWithAggregationInput>
    by: Array<RoomScalarFieldEnum>
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }


  export type RoomGroupByOutputType = {
    id: string
    capacity: number
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect = {
    id?: boolean
    capacity?: boolean
  }


  export type RoomGetPayload<S extends boolean | null | undefined | RoomArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Room :
    S extends undefined ? never :
    S extends { include: any } & (RoomArgs | RoomFindManyArgs)
    ? Room 
    : S extends { select: any } & (RoomArgs | RoomFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Room ? Room[P] : never
  } 
      : Room


  type RoomCountArgs = Merge<
    Omit<RoomFindManyArgs, 'select' | 'include'> & {
      select?: RoomCountAggregateInputType | true
    }
  >

  export interface RoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Room'> extends True ? Prisma__RoomClient<RoomGetPayload<T>> : Prisma__RoomClient<RoomGetPayload<T> | null, null>

    /**
     * Find one Room that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoomFindUniqueOrThrowArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Room'> extends True ? Prisma__RoomClient<RoomGetPayload<T>> : Prisma__RoomClient<RoomGetPayload<T> | null, null>

    /**
     * Find the first Room that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomFindFirstOrThrowArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomFindManyArgs>(
      args?: SelectSubset<T, RoomFindManyArgs>
    ): PrismaPromise<Array<RoomGetPayload<T>>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
    **/
    create<T extends RoomCreateArgs>(
      args: SelectSubset<T, RoomCreateArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Create many Rooms.
     *     @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     *     @example
     *     // Create many Rooms
     *     const room = await prisma.room.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomCreateManyArgs>(
      args?: SelectSubset<T, RoomCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
    **/
    delete<T extends RoomDeleteArgs>(
      args: SelectSubset<T, RoomDeleteArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomUpdateArgs>(
      args: SelectSubset<T, RoomUpdateArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomDeleteManyArgs>(
      args?: SelectSubset<T, RoomDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomUpdateManyArgs>(
      args: SelectSubset<T, RoomUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
    **/
    upsert<T extends RoomUpsertArgs>(
      args: SelectSubset<T, RoomUpsertArgs>
    ): Prisma__RoomClient<RoomGetPayload<T>>

    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoomClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Room base type for findUnique actions
   */
  export type RoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where: RoomWhereUniqueInput
  }

  /**
   * Room: findUnique
   */
  export interface RoomFindUniqueArgs extends RoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room base type for findFirst actions
   */
  export type RoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     * 
    **/
    distinct?: Enumerable<RoomScalarFieldEnum>
  }

  /**
   * Room: findFirst
   */
  export interface RoomFindFirstArgs extends RoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Filter, which Room to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     * 
    **/
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room findMany
   */
  export type RoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Filter, which Rooms to fetch.
     * 
    **/
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     * 
    **/
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoomScalarFieldEnum>
  }


  /**
   * Room create
   */
  export type RoomCreateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * The data needed to create a Room.
     * 
    **/
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }


  /**
   * Room createMany
   */
  export type RoomCreateManyArgs = {
    /**
     * The data used to create many Rooms.
     * 
    **/
    data: Enumerable<RoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Room update
   */
  export type RoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * The data needed to update a Room.
     * 
    **/
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs = {
    /**
     * The data used to update Rooms.
     * 
    **/
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room upsert
   */
  export type RoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * The filter to search for the Room to update in case it exists.
     * 
    **/
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     * 
    **/
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }


  /**
   * Room delete
   */
  export type RoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
    /**
     * Filter which Room to delete.
     * 
    **/
    where: RoomWhereUniqueInput
  }


  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs = {
    /**
     * Filter which Rooms to delete
     * 
    **/
    where?: RoomWhereInput
  }


  /**
   * Room without action
   */
  export type RoomArgs = {
    /**
     * Select specific fields to fetch from the Room
     * 
    **/
    select?: RoomSelect | null
  }



  /**
   * Model RoomTimeEvent
   */


  export type AggregateRoomTimeEvent = {
    _count: RoomTimeEventCountAggregateOutputType | null
    _avg: RoomTimeEventAvgAggregateOutputType | null
    _sum: RoomTimeEventSumAggregateOutputType | null
    _min: RoomTimeEventMinAggregateOutputType | null
    _max: RoomTimeEventMaxAggregateOutputType | null
  }

  export type RoomTimeEventAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
  }

  export type RoomTimeEventSumAggregateOutputType = {
    id: number | null
    eventId: number | null
  }

  export type RoomTimeEventMinAggregateOutputType = {
    id: number | null
    dateStart: Date | null
    dateEnd: Date | null
    eventId: number | null
    roomId: string | null
  }

  export type RoomTimeEventMaxAggregateOutputType = {
    id: number | null
    dateStart: Date | null
    dateEnd: Date | null
    eventId: number | null
    roomId: string | null
  }

  export type RoomTimeEventCountAggregateOutputType = {
    id: number
    dateStart: number
    dateEnd: number
    eventId: number
    roomId: number
    _all: number
  }


  export type RoomTimeEventAvgAggregateInputType = {
    id?: true
    eventId?: true
  }

  export type RoomTimeEventSumAggregateInputType = {
    id?: true
    eventId?: true
  }

  export type RoomTimeEventMinAggregateInputType = {
    id?: true
    dateStart?: true
    dateEnd?: true
    eventId?: true
    roomId?: true
  }

  export type RoomTimeEventMaxAggregateInputType = {
    id?: true
    dateStart?: true
    dateEnd?: true
    eventId?: true
    roomId?: true
  }

  export type RoomTimeEventCountAggregateInputType = {
    id?: true
    dateStart?: true
    dateEnd?: true
    eventId?: true
    roomId?: true
    _all?: true
  }

  export type RoomTimeEventAggregateArgs = {
    /**
     * Filter which RoomTimeEvent to aggregate.
     * 
    **/
    where?: RoomTimeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTimeEvents to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomTimeEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RoomTimeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTimeEvents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTimeEvents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoomTimeEvents
    **/
    _count?: true | RoomTimeEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomTimeEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomTimeEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomTimeEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomTimeEventMaxAggregateInputType
  }

  export type GetRoomTimeEventAggregateType<T extends RoomTimeEventAggregateArgs> = {
        [P in keyof T & keyof AggregateRoomTimeEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoomTimeEvent[P]>
      : GetScalarType<T[P], AggregateRoomTimeEvent[P]>
  }




  export type RoomTimeEventGroupByArgs = {
    where?: RoomTimeEventWhereInput
    orderBy?: Enumerable<RoomTimeEventOrderByWithAggregationInput>
    by: Array<RoomTimeEventScalarFieldEnum>
    having?: RoomTimeEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomTimeEventCountAggregateInputType | true
    _avg?: RoomTimeEventAvgAggregateInputType
    _sum?: RoomTimeEventSumAggregateInputType
    _min?: RoomTimeEventMinAggregateInputType
    _max?: RoomTimeEventMaxAggregateInputType
  }


  export type RoomTimeEventGroupByOutputType = {
    id: number
    dateStart: Date
    dateEnd: Date
    eventId: number
    roomId: string
    _count: RoomTimeEventCountAggregateOutputType | null
    _avg: RoomTimeEventAvgAggregateOutputType | null
    _sum: RoomTimeEventSumAggregateOutputType | null
    _min: RoomTimeEventMinAggregateOutputType | null
    _max: RoomTimeEventMaxAggregateOutputType | null
  }

  type GetRoomTimeEventGroupByPayload<T extends RoomTimeEventGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RoomTimeEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomTimeEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomTimeEventGroupByOutputType[P]>
            : GetScalarType<T[P], RoomTimeEventGroupByOutputType[P]>
        }
      >
    >


  export type RoomTimeEventSelect = {
    id?: boolean
    dateStart?: boolean
    dateEnd?: boolean
    eventId?: boolean
    roomId?: boolean
    EventUserPresence?: boolean | EventUserPresenceFindManyArgs
    _count?: boolean | RoomTimeEventCountOutputTypeArgs
  }


  export type RoomTimeEventInclude = {
    EventUserPresence?: boolean | EventUserPresenceFindManyArgs
    _count?: boolean | RoomTimeEventCountOutputTypeArgs
  } 

  export type RoomTimeEventGetPayload<S extends boolean | null | undefined | RoomTimeEventArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? RoomTimeEvent :
    S extends undefined ? never :
    S extends { include: any } & (RoomTimeEventArgs | RoomTimeEventFindManyArgs)
    ? RoomTimeEvent  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'EventUserPresence' ? Array < EventUserPresenceGetPayload<S['include'][P]>>  :
        P extends '_count' ? RoomTimeEventCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (RoomTimeEventArgs | RoomTimeEventFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'EventUserPresence' ? Array < EventUserPresenceGetPayload<S['select'][P]>>  :
        P extends '_count' ? RoomTimeEventCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof RoomTimeEvent ? RoomTimeEvent[P] : never
  } 
      : RoomTimeEvent


  type RoomTimeEventCountArgs = Merge<
    Omit<RoomTimeEventFindManyArgs, 'select' | 'include'> & {
      select?: RoomTimeEventCountAggregateInputType | true
    }
  >

  export interface RoomTimeEventDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one RoomTimeEvent that matches the filter.
     * @param {RoomTimeEventFindUniqueArgs} args - Arguments to find a RoomTimeEvent
     * @example
     * // Get one RoomTimeEvent
     * const roomTimeEvent = await prisma.roomTimeEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoomTimeEventFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoomTimeEventFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RoomTimeEvent'> extends True ? Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>> : Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T> | null, null>

    /**
     * Find one RoomTimeEvent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoomTimeEventFindUniqueOrThrowArgs} args - Arguments to find a RoomTimeEvent
     * @example
     * // Get one RoomTimeEvent
     * const roomTimeEvent = await prisma.roomTimeEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoomTimeEventFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, RoomTimeEventFindUniqueOrThrowArgs>
    ): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>>

    /**
     * Find the first RoomTimeEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventFindFirstArgs} args - Arguments to find a RoomTimeEvent
     * @example
     * // Get one RoomTimeEvent
     * const roomTimeEvent = await prisma.roomTimeEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoomTimeEventFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoomTimeEventFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RoomTimeEvent'> extends True ? Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>> : Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T> | null, null>

    /**
     * Find the first RoomTimeEvent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventFindFirstOrThrowArgs} args - Arguments to find a RoomTimeEvent
     * @example
     * // Get one RoomTimeEvent
     * const roomTimeEvent = await prisma.roomTimeEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoomTimeEventFindFirstOrThrowArgs>(
      args?: SelectSubset<T, RoomTimeEventFindFirstOrThrowArgs>
    ): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>>

    /**
     * Find zero or more RoomTimeEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoomTimeEvents
     * const roomTimeEvents = await prisma.roomTimeEvent.findMany()
     * 
     * // Get first 10 RoomTimeEvents
     * const roomTimeEvents = await prisma.roomTimeEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomTimeEventWithIdOnly = await prisma.roomTimeEvent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoomTimeEventFindManyArgs>(
      args?: SelectSubset<T, RoomTimeEventFindManyArgs>
    ): PrismaPromise<Array<RoomTimeEventGetPayload<T>>>

    /**
     * Create a RoomTimeEvent.
     * @param {RoomTimeEventCreateArgs} args - Arguments to create a RoomTimeEvent.
     * @example
     * // Create one RoomTimeEvent
     * const RoomTimeEvent = await prisma.roomTimeEvent.create({
     *   data: {
     *     // ... data to create a RoomTimeEvent
     *   }
     * })
     * 
    **/
    create<T extends RoomTimeEventCreateArgs>(
      args: SelectSubset<T, RoomTimeEventCreateArgs>
    ): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>>

    /**
     * Create many RoomTimeEvents.
     *     @param {RoomTimeEventCreateManyArgs} args - Arguments to create many RoomTimeEvents.
     *     @example
     *     // Create many RoomTimeEvents
     *     const roomTimeEvent = await prisma.roomTimeEvent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoomTimeEventCreateManyArgs>(
      args?: SelectSubset<T, RoomTimeEventCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RoomTimeEvent.
     * @param {RoomTimeEventDeleteArgs} args - Arguments to delete one RoomTimeEvent.
     * @example
     * // Delete one RoomTimeEvent
     * const RoomTimeEvent = await prisma.roomTimeEvent.delete({
     *   where: {
     *     // ... filter to delete one RoomTimeEvent
     *   }
     * })
     * 
    **/
    delete<T extends RoomTimeEventDeleteArgs>(
      args: SelectSubset<T, RoomTimeEventDeleteArgs>
    ): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>>

    /**
     * Update one RoomTimeEvent.
     * @param {RoomTimeEventUpdateArgs} args - Arguments to update one RoomTimeEvent.
     * @example
     * // Update one RoomTimeEvent
     * const roomTimeEvent = await prisma.roomTimeEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoomTimeEventUpdateArgs>(
      args: SelectSubset<T, RoomTimeEventUpdateArgs>
    ): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>>

    /**
     * Delete zero or more RoomTimeEvents.
     * @param {RoomTimeEventDeleteManyArgs} args - Arguments to filter RoomTimeEvents to delete.
     * @example
     * // Delete a few RoomTimeEvents
     * const { count } = await prisma.roomTimeEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoomTimeEventDeleteManyArgs>(
      args?: SelectSubset<T, RoomTimeEventDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoomTimeEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoomTimeEvents
     * const roomTimeEvent = await prisma.roomTimeEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoomTimeEventUpdateManyArgs>(
      args: SelectSubset<T, RoomTimeEventUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RoomTimeEvent.
     * @param {RoomTimeEventUpsertArgs} args - Arguments to update or create a RoomTimeEvent.
     * @example
     * // Update or create a RoomTimeEvent
     * const roomTimeEvent = await prisma.roomTimeEvent.upsert({
     *   create: {
     *     // ... data to create a RoomTimeEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoomTimeEvent we want to update
     *   }
     * })
    **/
    upsert<T extends RoomTimeEventUpsertArgs>(
      args: SelectSubset<T, RoomTimeEventUpsertArgs>
    ): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T>>

    /**
     * Count the number of RoomTimeEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventCountArgs} args - Arguments to filter RoomTimeEvents to count.
     * @example
     * // Count the number of RoomTimeEvents
     * const count = await prisma.roomTimeEvent.count({
     *   where: {
     *     // ... the filter for the RoomTimeEvents we want to count
     *   }
     * })
    **/
    count<T extends RoomTimeEventCountArgs>(
      args?: Subset<T, RoomTimeEventCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomTimeEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoomTimeEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomTimeEventAggregateArgs>(args: Subset<T, RoomTimeEventAggregateArgs>): PrismaPromise<GetRoomTimeEventAggregateType<T>>

    /**
     * Group by RoomTimeEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomTimeEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomTimeEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomTimeEventGroupByArgs['orderBy'] }
        : { orderBy?: RoomTimeEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomTimeEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomTimeEventGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for RoomTimeEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoomTimeEventClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    EventUserPresence<T extends EventUserPresenceFindManyArgs= {}>(args?: Subset<T, EventUserPresenceFindManyArgs>): PrismaPromise<Array<EventUserPresenceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * RoomTimeEvent base type for findUnique actions
   */
  export type RoomTimeEventFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * Filter, which RoomTimeEvent to fetch.
     * 
    **/
    where: RoomTimeEventWhereUniqueInput
  }

  /**
   * RoomTimeEvent: findUnique
   */
  export interface RoomTimeEventFindUniqueArgs extends RoomTimeEventFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RoomTimeEvent findUniqueOrThrow
   */
  export type RoomTimeEventFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * Filter, which RoomTimeEvent to fetch.
     * 
    **/
    where: RoomTimeEventWhereUniqueInput
  }


  /**
   * RoomTimeEvent base type for findFirst actions
   */
  export type RoomTimeEventFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * Filter, which RoomTimeEvent to fetch.
     * 
    **/
    where?: RoomTimeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTimeEvents to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomTimeEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTimeEvents.
     * 
    **/
    cursor?: RoomTimeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTimeEvents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTimeEvents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTimeEvents.
     * 
    **/
    distinct?: Enumerable<RoomTimeEventScalarFieldEnum>
  }

  /**
   * RoomTimeEvent: findFirst
   */
  export interface RoomTimeEventFindFirstArgs extends RoomTimeEventFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * RoomTimeEvent findFirstOrThrow
   */
  export type RoomTimeEventFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * Filter, which RoomTimeEvent to fetch.
     * 
    **/
    where?: RoomTimeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTimeEvents to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomTimeEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoomTimeEvents.
     * 
    **/
    cursor?: RoomTimeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTimeEvents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTimeEvents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoomTimeEvents.
     * 
    **/
    distinct?: Enumerable<RoomTimeEventScalarFieldEnum>
  }


  /**
   * RoomTimeEvent findMany
   */
  export type RoomTimeEventFindManyArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * Filter, which RoomTimeEvents to fetch.
     * 
    **/
    where?: RoomTimeEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoomTimeEvents to fetch.
     * 
    **/
    orderBy?: Enumerable<RoomTimeEventOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoomTimeEvents.
     * 
    **/
    cursor?: RoomTimeEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoomTimeEvents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoomTimeEvents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RoomTimeEventScalarFieldEnum>
  }


  /**
   * RoomTimeEvent create
   */
  export type RoomTimeEventCreateArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * The data needed to create a RoomTimeEvent.
     * 
    **/
    data: XOR<RoomTimeEventCreateInput, RoomTimeEventUncheckedCreateInput>
  }


  /**
   * RoomTimeEvent createMany
   */
  export type RoomTimeEventCreateManyArgs = {
    /**
     * The data used to create many RoomTimeEvents.
     * 
    **/
    data: Enumerable<RoomTimeEventCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RoomTimeEvent update
   */
  export type RoomTimeEventUpdateArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * The data needed to update a RoomTimeEvent.
     * 
    **/
    data: XOR<RoomTimeEventUpdateInput, RoomTimeEventUncheckedUpdateInput>
    /**
     * Choose, which RoomTimeEvent to update.
     * 
    **/
    where: RoomTimeEventWhereUniqueInput
  }


  /**
   * RoomTimeEvent updateMany
   */
  export type RoomTimeEventUpdateManyArgs = {
    /**
     * The data used to update RoomTimeEvents.
     * 
    **/
    data: XOR<RoomTimeEventUpdateManyMutationInput, RoomTimeEventUncheckedUpdateManyInput>
    /**
     * Filter which RoomTimeEvents to update
     * 
    **/
    where?: RoomTimeEventWhereInput
  }


  /**
   * RoomTimeEvent upsert
   */
  export type RoomTimeEventUpsertArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * The filter to search for the RoomTimeEvent to update in case it exists.
     * 
    **/
    where: RoomTimeEventWhereUniqueInput
    /**
     * In case the RoomTimeEvent found by the `where` argument doesn't exist, create a new RoomTimeEvent with this data.
     * 
    **/
    create: XOR<RoomTimeEventCreateInput, RoomTimeEventUncheckedCreateInput>
    /**
     * In case the RoomTimeEvent was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RoomTimeEventUpdateInput, RoomTimeEventUncheckedUpdateInput>
  }


  /**
   * RoomTimeEvent delete
   */
  export type RoomTimeEventDeleteArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
    /**
     * Filter which RoomTimeEvent to delete.
     * 
    **/
    where: RoomTimeEventWhereUniqueInput
  }


  /**
   * RoomTimeEvent deleteMany
   */
  export type RoomTimeEventDeleteManyArgs = {
    /**
     * Filter which RoomTimeEvents to delete
     * 
    **/
    where?: RoomTimeEventWhereInput
  }


  /**
   * RoomTimeEvent without action
   */
  export type RoomTimeEventArgs = {
    /**
     * Select specific fields to fetch from the RoomTimeEvent
     * 
    **/
    select?: RoomTimeEventSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RoomTimeEventInclude | null
  }



  /**
   * Model EventUserPresence
   */


  export type AggregateEventUserPresence = {
    _count: EventUserPresenceCountAggregateOutputType | null
    _avg: EventUserPresenceAvgAggregateOutputType | null
    _sum: EventUserPresenceSumAggregateOutputType | null
    _min: EventUserPresenceMinAggregateOutputType | null
    _max: EventUserPresenceMaxAggregateOutputType | null
  }

  export type EventUserPresenceAvgAggregateOutputType = {
    id: number | null
    roomTimeEventId: number | null
    userId: number | null
  }

  export type EventUserPresenceSumAggregateOutputType = {
    id: number | null
    roomTimeEventId: number | null
    userId: number | null
  }

  export type EventUserPresenceMinAggregateOutputType = {
    id: number | null
    presenceStatus: boolean | null
    roomTimeEventId: number | null
    userId: number | null
  }

  export type EventUserPresenceMaxAggregateOutputType = {
    id: number | null
    presenceStatus: boolean | null
    roomTimeEventId: number | null
    userId: number | null
  }

  export type EventUserPresenceCountAggregateOutputType = {
    id: number
    presenceStatus: number
    roomTimeEventId: number
    userId: number
    _all: number
  }


  export type EventUserPresenceAvgAggregateInputType = {
    id?: true
    roomTimeEventId?: true
    userId?: true
  }

  export type EventUserPresenceSumAggregateInputType = {
    id?: true
    roomTimeEventId?: true
    userId?: true
  }

  export type EventUserPresenceMinAggregateInputType = {
    id?: true
    presenceStatus?: true
    roomTimeEventId?: true
    userId?: true
  }

  export type EventUserPresenceMaxAggregateInputType = {
    id?: true
    presenceStatus?: true
    roomTimeEventId?: true
    userId?: true
  }

  export type EventUserPresenceCountAggregateInputType = {
    id?: true
    presenceStatus?: true
    roomTimeEventId?: true
    userId?: true
    _all?: true
  }

  export type EventUserPresenceAggregateArgs = {
    /**
     * Filter which EventUserPresence to aggregate.
     * 
    **/
    where?: EventUserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventUserPresences to fetch.
     * 
    **/
    orderBy?: Enumerable<EventUserPresenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EventUserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventUserPresences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventUserPresences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventUserPresences
    **/
    _count?: true | EventUserPresenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventUserPresenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventUserPresenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventUserPresenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventUserPresenceMaxAggregateInputType
  }

  export type GetEventUserPresenceAggregateType<T extends EventUserPresenceAggregateArgs> = {
        [P in keyof T & keyof AggregateEventUserPresence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventUserPresence[P]>
      : GetScalarType<T[P], AggregateEventUserPresence[P]>
  }




  export type EventUserPresenceGroupByArgs = {
    where?: EventUserPresenceWhereInput
    orderBy?: Enumerable<EventUserPresenceOrderByWithAggregationInput>
    by: Array<EventUserPresenceScalarFieldEnum>
    having?: EventUserPresenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventUserPresenceCountAggregateInputType | true
    _avg?: EventUserPresenceAvgAggregateInputType
    _sum?: EventUserPresenceSumAggregateInputType
    _min?: EventUserPresenceMinAggregateInputType
    _max?: EventUserPresenceMaxAggregateInputType
  }


  export type EventUserPresenceGroupByOutputType = {
    id: number
    presenceStatus: boolean
    roomTimeEventId: number
    userId: number
    _count: EventUserPresenceCountAggregateOutputType | null
    _avg: EventUserPresenceAvgAggregateOutputType | null
    _sum: EventUserPresenceSumAggregateOutputType | null
    _min: EventUserPresenceMinAggregateOutputType | null
    _max: EventUserPresenceMaxAggregateOutputType | null
  }

  type GetEventUserPresenceGroupByPayload<T extends EventUserPresenceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EventUserPresenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventUserPresenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventUserPresenceGroupByOutputType[P]>
            : GetScalarType<T[P], EventUserPresenceGroupByOutputType[P]>
        }
      >
    >


  export type EventUserPresenceSelect = {
    id?: boolean
    presenceStatus?: boolean
    roomTimeEvent?: boolean | RoomTimeEventArgs
    roomTimeEventId?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }


  export type EventUserPresenceInclude = {
    roomTimeEvent?: boolean | RoomTimeEventArgs
    user?: boolean | UserArgs
  } 

  export type EventUserPresenceGetPayload<S extends boolean | null | undefined | EventUserPresenceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EventUserPresence :
    S extends undefined ? never :
    S extends { include: any } & (EventUserPresenceArgs | EventUserPresenceFindManyArgs)
    ? EventUserPresence  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'roomTimeEvent' ? RoomTimeEventGetPayload<S['include'][P]> :
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EventUserPresenceArgs | EventUserPresenceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'roomTimeEvent' ? RoomTimeEventGetPayload<S['select'][P]> :
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof EventUserPresence ? EventUserPresence[P] : never
  } 
      : EventUserPresence


  type EventUserPresenceCountArgs = Merge<
    Omit<EventUserPresenceFindManyArgs, 'select' | 'include'> & {
      select?: EventUserPresenceCountAggregateInputType | true
    }
  >

  export interface EventUserPresenceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one EventUserPresence that matches the filter.
     * @param {EventUserPresenceFindUniqueArgs} args - Arguments to find a EventUserPresence
     * @example
     * // Get one EventUserPresence
     * const eventUserPresence = await prisma.eventUserPresence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventUserPresenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EventUserPresenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EventUserPresence'> extends True ? Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>> : Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T> | null, null>

    /**
     * Find one EventUserPresence that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventUserPresenceFindUniqueOrThrowArgs} args - Arguments to find a EventUserPresence
     * @example
     * // Get one EventUserPresence
     * const eventUserPresence = await prisma.eventUserPresence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventUserPresenceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EventUserPresenceFindUniqueOrThrowArgs>
    ): Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>>

    /**
     * Find the first EventUserPresence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceFindFirstArgs} args - Arguments to find a EventUserPresence
     * @example
     * // Get one EventUserPresence
     * const eventUserPresence = await prisma.eventUserPresence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventUserPresenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EventUserPresenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EventUserPresence'> extends True ? Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>> : Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T> | null, null>

    /**
     * Find the first EventUserPresence that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceFindFirstOrThrowArgs} args - Arguments to find a EventUserPresence
     * @example
     * // Get one EventUserPresence
     * const eventUserPresence = await prisma.eventUserPresence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventUserPresenceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EventUserPresenceFindFirstOrThrowArgs>
    ): Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>>

    /**
     * Find zero or more EventUserPresences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventUserPresences
     * const eventUserPresences = await prisma.eventUserPresence.findMany()
     * 
     * // Get first 10 EventUserPresences
     * const eventUserPresences = await prisma.eventUserPresence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventUserPresenceWithIdOnly = await prisma.eventUserPresence.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EventUserPresenceFindManyArgs>(
      args?: SelectSubset<T, EventUserPresenceFindManyArgs>
    ): PrismaPromise<Array<EventUserPresenceGetPayload<T>>>

    /**
     * Create a EventUserPresence.
     * @param {EventUserPresenceCreateArgs} args - Arguments to create a EventUserPresence.
     * @example
     * // Create one EventUserPresence
     * const EventUserPresence = await prisma.eventUserPresence.create({
     *   data: {
     *     // ... data to create a EventUserPresence
     *   }
     * })
     * 
    **/
    create<T extends EventUserPresenceCreateArgs>(
      args: SelectSubset<T, EventUserPresenceCreateArgs>
    ): Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>>

    /**
     * Create many EventUserPresences.
     *     @param {EventUserPresenceCreateManyArgs} args - Arguments to create many EventUserPresences.
     *     @example
     *     // Create many EventUserPresences
     *     const eventUserPresence = await prisma.eventUserPresence.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventUserPresenceCreateManyArgs>(
      args?: SelectSubset<T, EventUserPresenceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a EventUserPresence.
     * @param {EventUserPresenceDeleteArgs} args - Arguments to delete one EventUserPresence.
     * @example
     * // Delete one EventUserPresence
     * const EventUserPresence = await prisma.eventUserPresence.delete({
     *   where: {
     *     // ... filter to delete one EventUserPresence
     *   }
     * })
     * 
    **/
    delete<T extends EventUserPresenceDeleteArgs>(
      args: SelectSubset<T, EventUserPresenceDeleteArgs>
    ): Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>>

    /**
     * Update one EventUserPresence.
     * @param {EventUserPresenceUpdateArgs} args - Arguments to update one EventUserPresence.
     * @example
     * // Update one EventUserPresence
     * const eventUserPresence = await prisma.eventUserPresence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUserPresenceUpdateArgs>(
      args: SelectSubset<T, EventUserPresenceUpdateArgs>
    ): Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>>

    /**
     * Delete zero or more EventUserPresences.
     * @param {EventUserPresenceDeleteManyArgs} args - Arguments to filter EventUserPresences to delete.
     * @example
     * // Delete a few EventUserPresences
     * const { count } = await prisma.eventUserPresence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventUserPresenceDeleteManyArgs>(
      args?: SelectSubset<T, EventUserPresenceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventUserPresences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventUserPresences
     * const eventUserPresence = await prisma.eventUserPresence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUserPresenceUpdateManyArgs>(
      args: SelectSubset<T, EventUserPresenceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one EventUserPresence.
     * @param {EventUserPresenceUpsertArgs} args - Arguments to update or create a EventUserPresence.
     * @example
     * // Update or create a EventUserPresence
     * const eventUserPresence = await prisma.eventUserPresence.upsert({
     *   create: {
     *     // ... data to create a EventUserPresence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventUserPresence we want to update
     *   }
     * })
    **/
    upsert<T extends EventUserPresenceUpsertArgs>(
      args: SelectSubset<T, EventUserPresenceUpsertArgs>
    ): Prisma__EventUserPresenceClient<EventUserPresenceGetPayload<T>>

    /**
     * Count the number of EventUserPresences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceCountArgs} args - Arguments to filter EventUserPresences to count.
     * @example
     * // Count the number of EventUserPresences
     * const count = await prisma.eventUserPresence.count({
     *   where: {
     *     // ... the filter for the EventUserPresences we want to count
     *   }
     * })
    **/
    count<T extends EventUserPresenceCountArgs>(
      args?: Subset<T, EventUserPresenceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventUserPresenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventUserPresence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventUserPresenceAggregateArgs>(args: Subset<T, EventUserPresenceAggregateArgs>): PrismaPromise<GetEventUserPresenceAggregateType<T>>

    /**
     * Group by EventUserPresence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUserPresenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventUserPresenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventUserPresenceGroupByArgs['orderBy'] }
        : { orderBy?: EventUserPresenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventUserPresenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventUserPresenceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EventUserPresence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EventUserPresenceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    roomTimeEvent<T extends RoomTimeEventArgs= {}>(args?: Subset<T, RoomTimeEventArgs>): Prisma__RoomTimeEventClient<RoomTimeEventGetPayload<T> | Null>;

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EventUserPresence base type for findUnique actions
   */
  export type EventUserPresenceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * Filter, which EventUserPresence to fetch.
     * 
    **/
    where: EventUserPresenceWhereUniqueInput
  }

  /**
   * EventUserPresence: findUnique
   */
  export interface EventUserPresenceFindUniqueArgs extends EventUserPresenceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EventUserPresence findUniqueOrThrow
   */
  export type EventUserPresenceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * Filter, which EventUserPresence to fetch.
     * 
    **/
    where: EventUserPresenceWhereUniqueInput
  }


  /**
   * EventUserPresence base type for findFirst actions
   */
  export type EventUserPresenceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * Filter, which EventUserPresence to fetch.
     * 
    **/
    where?: EventUserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventUserPresences to fetch.
     * 
    **/
    orderBy?: Enumerable<EventUserPresenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventUserPresences.
     * 
    **/
    cursor?: EventUserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventUserPresences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventUserPresences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventUserPresences.
     * 
    **/
    distinct?: Enumerable<EventUserPresenceScalarFieldEnum>
  }

  /**
   * EventUserPresence: findFirst
   */
  export interface EventUserPresenceFindFirstArgs extends EventUserPresenceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EventUserPresence findFirstOrThrow
   */
  export type EventUserPresenceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * Filter, which EventUserPresence to fetch.
     * 
    **/
    where?: EventUserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventUserPresences to fetch.
     * 
    **/
    orderBy?: Enumerable<EventUserPresenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventUserPresences.
     * 
    **/
    cursor?: EventUserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventUserPresences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventUserPresences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventUserPresences.
     * 
    **/
    distinct?: Enumerable<EventUserPresenceScalarFieldEnum>
  }


  /**
   * EventUserPresence findMany
   */
  export type EventUserPresenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * Filter, which EventUserPresences to fetch.
     * 
    **/
    where?: EventUserPresenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventUserPresences to fetch.
     * 
    **/
    orderBy?: Enumerable<EventUserPresenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventUserPresences.
     * 
    **/
    cursor?: EventUserPresenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventUserPresences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventUserPresences.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EventUserPresenceScalarFieldEnum>
  }


  /**
   * EventUserPresence create
   */
  export type EventUserPresenceCreateArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * The data needed to create a EventUserPresence.
     * 
    **/
    data: XOR<EventUserPresenceCreateInput, EventUserPresenceUncheckedCreateInput>
  }


  /**
   * EventUserPresence createMany
   */
  export type EventUserPresenceCreateManyArgs = {
    /**
     * The data used to create many EventUserPresences.
     * 
    **/
    data: Enumerable<EventUserPresenceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EventUserPresence update
   */
  export type EventUserPresenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * The data needed to update a EventUserPresence.
     * 
    **/
    data: XOR<EventUserPresenceUpdateInput, EventUserPresenceUncheckedUpdateInput>
    /**
     * Choose, which EventUserPresence to update.
     * 
    **/
    where: EventUserPresenceWhereUniqueInput
  }


  /**
   * EventUserPresence updateMany
   */
  export type EventUserPresenceUpdateManyArgs = {
    /**
     * The data used to update EventUserPresences.
     * 
    **/
    data: XOR<EventUserPresenceUpdateManyMutationInput, EventUserPresenceUncheckedUpdateManyInput>
    /**
     * Filter which EventUserPresences to update
     * 
    **/
    where?: EventUserPresenceWhereInput
  }


  /**
   * EventUserPresence upsert
   */
  export type EventUserPresenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * The filter to search for the EventUserPresence to update in case it exists.
     * 
    **/
    where: EventUserPresenceWhereUniqueInput
    /**
     * In case the EventUserPresence found by the `where` argument doesn't exist, create a new EventUserPresence with this data.
     * 
    **/
    create: XOR<EventUserPresenceCreateInput, EventUserPresenceUncheckedCreateInput>
    /**
     * In case the EventUserPresence was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EventUserPresenceUpdateInput, EventUserPresenceUncheckedUpdateInput>
  }


  /**
   * EventUserPresence delete
   */
  export type EventUserPresenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
    /**
     * Filter which EventUserPresence to delete.
     * 
    **/
    where: EventUserPresenceWhereUniqueInput
  }


  /**
   * EventUserPresence deleteMany
   */
  export type EventUserPresenceDeleteManyArgs = {
    /**
     * Filter which EventUserPresences to delete
     * 
    **/
    where?: EventUserPresenceWhereInput
  }


  /**
   * EventUserPresence without action
   */
  export type EventUserPresenceArgs = {
    /**
     * Select specific fields to fetch from the EventUserPresence
     * 
    **/
    select?: EventUserPresenceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EventUserPresenceInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ContentScalarFieldEnum: {
    id: 'id',
    markdownText: 'markdownText',
    plainText: 'plainText',
    date: 'date',
    linkedEntity: 'linkedEntity',
    linkedEntityId: 'linkedEntityId'
  };

  export type ContentScalarFieldEnum = (typeof ContentScalarFieldEnum)[keyof typeof ContentScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    userId: 'userId',
    subjectId: 'subjectId',
    enrollmentDate: 'enrollmentDate',
    roleTitle: 'roleTitle',
    status: 'status'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    linkedEntity: 'linkedEntity',
    linkedEntityId: 'linkedEntityId'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const EventUserPresenceScalarFieldEnum: {
    id: 'id',
    presenceStatus: 'presenceStatus',
    roomTimeEventId: 'roomTimeEventId',
    userId: 'userId'
  };

  export type EventUserPresenceScalarFieldEnum = (typeof EventUserPresenceScalarFieldEnum)[keyof typeof EventUserPresenceScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    Date: 'Date',
    linkedEntity: 'linkedEntity',
    linkedEntityId: 'linkedEntityId',
    contentId: 'contentId',
    ownerId: 'ownerId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const RoomScalarFieldEnum: {
    id: 'id',
    capacity: 'capacity'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const RoomTimeEventScalarFieldEnum: {
    id: 'id',
    dateStart: 'dateStart',
    dateEnd: 'dateEnd',
    eventId: 'eventId',
    roomId: 'roomId'
  };

  export type RoomTimeEventScalarFieldEnum = (typeof RoomTimeEventScalarFieldEnum)[keyof typeof RoomTimeEventScalarFieldEnum]


  export const SeminarScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    mentorId: 'mentorId',
    type: 'type',
    contentId: 'contentId',
    subjectId: 'subjectId',
    userId: 'userId'
  };

  export type SeminarScalarFieldEnum = (typeof SeminarScalarFieldEnum)[keyof typeof SeminarScalarFieldEnum]


  export const SeminarSuggestionScalarFieldEnum: {
    id: 'id',
    seminarId: 'seminarId',
    subjectId: 'subjectId'
  };

  export type SeminarSuggestionScalarFieldEnum = (typeof SeminarSuggestionScalarFieldEnum)[keyof typeof SeminarSuggestionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SubjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    ects_bod: 'ects_bod',
    semester: 'semester',
    status: 'status',
    contentId: 'contentId'
  };

  export type SubjectScalarFieldEnum = (typeof SubjectScalarFieldEnum)[keyof typeof SubjectScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    password: 'password',
    firstname: 'firstname',
    lastname: 'lastname',
    jmbag: 'jmbag',
    email: 'email',
    status: 'status',
    mentorID: 'mentorID'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    password?: StringFilter | string
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    jmbag?: StringFilter | string
    email?: StringFilter | string
    status?: EnumRoleFilter | Role
    mentorID?: IntFilter | number
    mentor?: XOR<UserRelationFilter, UserWhereInput>
    menteeId?: UserListRelationFilter
    Enrolled?: EnrollmentListRelationFilter
    EventPresence?: EventUserPresenceListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    jmbag?: SortOrder
    email?: SortOrder
    status?: SortOrder
    mentorID?: SortOrder
    mentor?: UserOrderByWithRelationInput
    menteeId?: UserOrderByRelationAggregateInput
    Enrolled?: EnrollmentOrderByRelationAggregateInput
    EventPresence?: EventUserPresenceOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    jmbag?: string
    email?: string
    mentorID?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    jmbag?: SortOrder
    email?: SortOrder
    status?: SortOrder
    mentorID?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    password?: StringWithAggregatesFilter | string
    firstname?: StringWithAggregatesFilter | string
    lastname?: StringWithAggregatesFilter | string
    jmbag?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    status?: EnumRoleWithAggregatesFilter | Role
    mentorID?: IntWithAggregatesFilter | number
  }

  export type SubjectWhereInput = {
    AND?: Enumerable<SubjectWhereInput>
    OR?: Enumerable<SubjectWhereInput>
    NOT?: Enumerable<SubjectWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    ects_bod?: IntFilter | number
    semester?: EnumSemesterFilter | Semester
    status?: EnumStatusFilter | Status
    contentId?: IntFilter | number
    Enrollment?: EnrollmentListRelationFilter
  }

  export type SubjectOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ects_bod?: SortOrder
    semester?: SortOrder
    status?: SortOrder
    contentId?: SortOrder
    Enrollment?: EnrollmentOrderByRelationAggregateInput
  }

  export type SubjectWhereUniqueInput = {
    id?: number
    contentId?: number
  }

  export type SubjectOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ects_bod?: SortOrder
    semester?: SortOrder
    status?: SortOrder
    contentId?: SortOrder
    _count?: SubjectCountOrderByAggregateInput
    _avg?: SubjectAvgOrderByAggregateInput
    _max?: SubjectMaxOrderByAggregateInput
    _min?: SubjectMinOrderByAggregateInput
    _sum?: SubjectSumOrderByAggregateInput
  }

  export type SubjectScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SubjectScalarWhereWithAggregatesInput>
    OR?: Enumerable<SubjectScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SubjectScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    ects_bod?: IntWithAggregatesFilter | number
    semester?: EnumSemesterWithAggregatesFilter | Semester
    status?: EnumStatusWithAggregatesFilter | Status
    contentId?: IntWithAggregatesFilter | number
  }

  export type ContentWhereInput = {
    AND?: Enumerable<ContentWhereInput>
    OR?: Enumerable<ContentWhereInput>
    NOT?: Enumerable<ContentWhereInput>
    id?: IntFilter | number
    markdownText?: StringFilter | string
    plainText?: StringFilter | string
    date?: DateTimeFilter | Date | string
    linkedEntity?: EnumLinkedEntityFilter | LinkedEntity
    linkedEntityId?: IntFilter | number
  }

  export type ContentOrderByWithRelationInput = {
    id?: SortOrder
    markdownText?: SortOrder
    plainText?: SortOrder
    date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type ContentWhereUniqueInput = {
    id?: number
  }

  export type ContentOrderByWithAggregationInput = {
    id?: SortOrder
    markdownText?: SortOrder
    plainText?: SortOrder
    date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    _count?: ContentCountOrderByAggregateInput
    _avg?: ContentAvgOrderByAggregateInput
    _max?: ContentMaxOrderByAggregateInput
    _min?: ContentMinOrderByAggregateInput
    _sum?: ContentSumOrderByAggregateInput
  }

  export type ContentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ContentScalarWhereWithAggregatesInput>
    OR?: Enumerable<ContentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ContentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    markdownText?: StringWithAggregatesFilter | string
    plainText?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    linkedEntity?: EnumLinkedEntityWithAggregatesFilter | LinkedEntity
    linkedEntityId?: IntWithAggregatesFilter | number
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    Date?: DateTimeFilter | Date | string
    linkedEntity?: EnumLinkedEntityFilter | LinkedEntity
    linkedEntityId?: IntFilter | number
    contentId?: IntFilter | number
    ownerId?: IntFilter | number
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    Date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    Date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    Date?: DateTimeWithAggregatesFilter | Date | string
    linkedEntity?: EnumLinkedEntityWithAggregatesFilter | LinkedEntity
    linkedEntityId?: IntWithAggregatesFilter | number
    contentId?: IntWithAggregatesFilter | number
    ownerId?: IntWithAggregatesFilter | number
  }

  export type EnrollmentWhereInput = {
    AND?: Enumerable<EnrollmentWhereInput>
    OR?: Enumerable<EnrollmentWhereInput>
    NOT?: Enumerable<EnrollmentWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    subject?: XOR<SubjectRelationFilter, SubjectWhereInput>
    subjectId?: IntFilter | number
    enrollmentDate?: DateTimeFilter | Date | string
    roleTitle?: EnumRoleFilter | Role
    status?: EnumStatusFilter | Status
  }

  export type EnrollmentOrderByWithRelationInput = {
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    subject?: SubjectOrderByWithRelationInput
    subjectId?: SortOrder
    enrollmentDate?: SortOrder
    roleTitle?: SortOrder
    status?: SortOrder
  }

  export type EnrollmentWhereUniqueInput = {
    userId_subjectId?: EnrollmentUserIdSubjectIdCompoundUniqueInput
  }

  export type EnrollmentOrderByWithAggregationInput = {
    userId?: SortOrder
    subjectId?: SortOrder
    enrollmentDate?: SortOrder
    roleTitle?: SortOrder
    status?: SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _avg?: EnrollmentAvgOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
    _sum?: EnrollmentSumOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EnrollmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<EnrollmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EnrollmentScalarWhereWithAggregatesInput>
    userId?: IntWithAggregatesFilter | number
    subjectId?: IntWithAggregatesFilter | number
    enrollmentDate?: DateTimeWithAggregatesFilter | Date | string
    roleTitle?: EnumRoleWithAggregatesFilter | Role
    status?: EnumStatusWithAggregatesFilter | Status
  }

  export type SeminarWhereInput = {
    AND?: Enumerable<SeminarWhereInput>
    OR?: Enumerable<SeminarWhereInput>
    NOT?: Enumerable<SeminarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    mentorId?: IntFilter | number
    type?: StringFilter | string
    contentId?: StringFilter | string
    subjectId?: StringFilter | string
    userId?: StringFilter | string
  }

  export type SeminarOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mentorId?: SortOrder
    type?: SortOrder
    contentId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
  }

  export type SeminarWhereUniqueInput = {
    id?: number
  }

  export type SeminarOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mentorId?: SortOrder
    type?: SortOrder
    contentId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
    _count?: SeminarCountOrderByAggregateInput
    _avg?: SeminarAvgOrderByAggregateInput
    _max?: SeminarMaxOrderByAggregateInput
    _min?: SeminarMinOrderByAggregateInput
    _sum?: SeminarSumOrderByAggregateInput
  }

  export type SeminarScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SeminarScalarWhereWithAggregatesInput>
    OR?: Enumerable<SeminarScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SeminarScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    mentorId?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    contentId?: StringWithAggregatesFilter | string
    subjectId?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type EventWhereInput = {
    AND?: Enumerable<EventWhereInput>
    OR?: Enumerable<EventWhereInput>
    NOT?: Enumerable<EventWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringFilter | string
    linkedEntity?: StringFilter | string
    linkedEntityId?: StringFilter | string
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type EventWhereUniqueInput = {
    id?: number
  }

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    linkedEntity?: StringWithAggregatesFilter | string
    linkedEntityId?: StringWithAggregatesFilter | string
  }

  export type SeminarSuggestionWhereInput = {
    AND?: Enumerable<SeminarSuggestionWhereInput>
    OR?: Enumerable<SeminarSuggestionWhereInput>
    NOT?: Enumerable<SeminarSuggestionWhereInput>
    id?: IntFilter | number
    seminarId?: IntFilter | number
    subjectId?: IntFilter | number
  }

  export type SeminarSuggestionOrderByWithRelationInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
  }

  export type SeminarSuggestionWhereUniqueInput = {
    id?: number
  }

  export type SeminarSuggestionOrderByWithAggregationInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
    _count?: SeminarSuggestionCountOrderByAggregateInput
    _avg?: SeminarSuggestionAvgOrderByAggregateInput
    _max?: SeminarSuggestionMaxOrderByAggregateInput
    _min?: SeminarSuggestionMinOrderByAggregateInput
    _sum?: SeminarSuggestionSumOrderByAggregateInput
  }

  export type SeminarSuggestionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SeminarSuggestionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SeminarSuggestionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SeminarSuggestionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    seminarId?: IntWithAggregatesFilter | number
    subjectId?: IntWithAggregatesFilter | number
  }

  export type RoomWhereInput = {
    AND?: Enumerable<RoomWhereInput>
    OR?: Enumerable<RoomWhereInput>
    NOT?: Enumerable<RoomWhereInput>
    id?: StringFilter | string
    capacity?: IntFilter | number
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type RoomWhereUniqueInput = {
    id?: string
  }

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    capacity?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoomScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    capacity?: IntWithAggregatesFilter | number
  }

  export type RoomTimeEventWhereInput = {
    AND?: Enumerable<RoomTimeEventWhereInput>
    OR?: Enumerable<RoomTimeEventWhereInput>
    NOT?: Enumerable<RoomTimeEventWhereInput>
    id?: IntFilter | number
    dateStart?: DateTimeFilter | Date | string
    dateEnd?: DateTimeFilter | Date | string
    eventId?: IntFilter | number
    roomId?: StringFilter | string
    EventUserPresence?: EventUserPresenceListRelationFilter
  }

  export type RoomTimeEventOrderByWithRelationInput = {
    id?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    eventId?: SortOrder
    roomId?: SortOrder
    EventUserPresence?: EventUserPresenceOrderByRelationAggregateInput
  }

  export type RoomTimeEventWhereUniqueInput = {
    id?: number
  }

  export type RoomTimeEventOrderByWithAggregationInput = {
    id?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    eventId?: SortOrder
    roomId?: SortOrder
    _count?: RoomTimeEventCountOrderByAggregateInput
    _avg?: RoomTimeEventAvgOrderByAggregateInput
    _max?: RoomTimeEventMaxOrderByAggregateInput
    _min?: RoomTimeEventMinOrderByAggregateInput
    _sum?: RoomTimeEventSumOrderByAggregateInput
  }

  export type RoomTimeEventScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoomTimeEventScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoomTimeEventScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoomTimeEventScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    dateStart?: DateTimeWithAggregatesFilter | Date | string
    dateEnd?: DateTimeWithAggregatesFilter | Date | string
    eventId?: IntWithAggregatesFilter | number
    roomId?: StringWithAggregatesFilter | string
  }

  export type EventUserPresenceWhereInput = {
    AND?: Enumerable<EventUserPresenceWhereInput>
    OR?: Enumerable<EventUserPresenceWhereInput>
    NOT?: Enumerable<EventUserPresenceWhereInput>
    id?: IntFilter | number
    presenceStatus?: BoolFilter | boolean
    roomTimeEvent?: XOR<RoomTimeEventRelationFilter, RoomTimeEventWhereInput>
    roomTimeEventId?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
  }

  export type EventUserPresenceOrderByWithRelationInput = {
    id?: SortOrder
    presenceStatus?: SortOrder
    roomTimeEvent?: RoomTimeEventOrderByWithRelationInput
    roomTimeEventId?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type EventUserPresenceWhereUniqueInput = {
    id?: number
  }

  export type EventUserPresenceOrderByWithAggregationInput = {
    id?: SortOrder
    presenceStatus?: SortOrder
    roomTimeEventId?: SortOrder
    userId?: SortOrder
    _count?: EventUserPresenceCountOrderByAggregateInput
    _avg?: EventUserPresenceAvgOrderByAggregateInput
    _max?: EventUserPresenceMaxOrderByAggregateInput
    _min?: EventUserPresenceMinOrderByAggregateInput
    _sum?: EventUserPresenceSumOrderByAggregateInput
  }

  export type EventUserPresenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EventUserPresenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<EventUserPresenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EventUserPresenceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    presenceStatus?: BoolWithAggregatesFilter | boolean
    roomTimeEventId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentor: UserCreateNestedOneWithoutMenteeIdInput
    menteeId?: UserCreateNestedManyWithoutMentorInput
    Enrolled?: EnrollmentCreateNestedManyWithoutUserInput
    EventPresence?: EventUserPresenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentorID: String
    menteeId?: UserUncheckedCreateNestedManyWithoutMentorInput
    Enrolled?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    EventPresence?: EventUserPresenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentor?: UserUpdateOneRequiredWithoutMenteeIdNestedInput
    menteeId?: UserUpdateManyWithoutMentorNestedInput
    Enrolled?: EnrollmentUpdateManyWithoutUserNestedInput
    EventPresence?: EventUserPresenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentorID?: IntFieldUpdateOperationsInput | number
    menteeId?: UserUncheckedUpdateManyWithoutMentorNestedInput
    Enrolled?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    EventPresence?: EventUserPresenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentorID: number
  }

  export type UserUpdateManyMutationInput = {
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentorID?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectCreateInput = {
    title: string
    description: string
    ects_bod: number
    semester: Semester
    status: Status
    contentId: number
    Enrollment?: EnrollmentCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    ects_bod: number
    semester: Semester
    status: Status
    contentId: number
    Enrollment?: EnrollmentUncheckedCreateNestedManyWithoutSubjectInput
  }

  export type SubjectUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects_bod?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterFieldUpdateOperationsInput | Semester
    status?: EnumStatusFieldUpdateOperationsInput | Status
    contentId?: IntFieldUpdateOperationsInput | number
    Enrollment?: EnrollmentUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects_bod?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterFieldUpdateOperationsInput | Semester
    status?: EnumStatusFieldUpdateOperationsInput | Status
    contentId?: IntFieldUpdateOperationsInput | number
    Enrollment?: EnrollmentUncheckedUpdateManyWithoutSubjectNestedInput
  }

  export type SubjectCreateManyInput = {
    id?: number
    title: string
    description: string
    ects_bod: number
    semester: Semester
    status: Status
    contentId: number
  }

  export type SubjectUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects_bod?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterFieldUpdateOperationsInput | Semester
    status?: EnumStatusFieldUpdateOperationsInput | Status
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects_bod?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterFieldUpdateOperationsInput | Semester
    status?: EnumStatusFieldUpdateOperationsInput | Status
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type ContentCreateInput = {
    markdownText: string
    plainText: string
    date?: Date | string
    linkedEntity: LinkedEntity
    linkedEntityId: number
  }

  export type ContentUncheckedCreateInput = {
    id?: number
    markdownText: string
    plainText: string
    date?: Date | string
    linkedEntity: LinkedEntity
    linkedEntityId: number
  }

  export type ContentUpdateInput = {
    markdownText?: StringFieldUpdateOperationsInput | string
    plainText?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
  }

  export type ContentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    markdownText?: StringFieldUpdateOperationsInput | string
    plainText?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
  }

  export type ContentCreateManyInput = {
    id?: number
    markdownText: string
    plainText: string
    date?: Date | string
    linkedEntity: LinkedEntity
    linkedEntityId: number
  }

  export type ContentUpdateManyMutationInput = {
    markdownText?: StringFieldUpdateOperationsInput | string
    plainText?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
  }

  export type ContentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    markdownText?: StringFieldUpdateOperationsInput | string
    plainText?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateInput = {
    title: string
    Date?: Date | string
    linkedEntity: LinkedEntity
    linkedEntityId: number
    contentId: number
    ownerId: number
  }

  export type PostUncheckedCreateInput = {
    id?: number
    title: string
    Date?: Date | string
    linkedEntity: LinkedEntity
    linkedEntityId: number
    contentId: number
    ownerId: number
  }

  export type PostUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type PostCreateManyInput = {
    id?: number
    title: string
    Date?: Date | string
    linkedEntity: LinkedEntity
    linkedEntityId: number
    contentId: number
    ownerId: number
  }

  export type PostUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    Date?: DateTimeFieldUpdateOperationsInput | Date | string
    linkedEntity?: EnumLinkedEntityFieldUpdateOperationsInput | LinkedEntity
    linkedEntityId?: IntFieldUpdateOperationsInput | number
    contentId?: IntFieldUpdateOperationsInput | number
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type EnrollmentCreateInput = {
    user: UserCreateNestedOneWithoutEnrolledInput
    subject: SubjectCreateNestedOneWithoutEnrollmentInput
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentUncheckedCreateInput = {
    userId: number
    subjectId: number
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentUpdateInput = {
    user?: UserUpdateOneRequiredWithoutEnrolledNestedInput
    subject?: SubjectUpdateOneRequiredWithoutEnrollmentNestedInput
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentCreateManyInput = {
    userId: number
    subjectId: number
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentUpdateManyMutationInput = {
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type SeminarCreateInput = {
    title: string
    description: string
    mentorId: number
    type: string
    contentId: string
    subjectId: string
    userId: string
  }

  export type SeminarUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    mentorId: number
    type: string
    contentId: string
    subjectId: string
    userId: string
  }

  export type SeminarUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mentorId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SeminarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mentorId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SeminarCreateManyInput = {
    id?: number
    title: string
    description: string
    mentorId: number
    type: string
    contentId: string
    subjectId: string
    userId: string
  }

  export type SeminarUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mentorId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SeminarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    mentorId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    subjectId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateInput = {
    title: string
    description: string
    linkedEntity: string
    linkedEntityId: string
  }

  export type EventUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    linkedEntity: string
    linkedEntityId: string
  }

  export type EventUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    linkedEntity?: StringFieldUpdateOperationsInput | string
    linkedEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    linkedEntity?: StringFieldUpdateOperationsInput | string
    linkedEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateManyInput = {
    id?: number
    title: string
    description: string
    linkedEntity: string
    linkedEntityId: string
  }

  export type EventUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    linkedEntity?: StringFieldUpdateOperationsInput | string
    linkedEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    linkedEntity?: StringFieldUpdateOperationsInput | string
    linkedEntityId?: StringFieldUpdateOperationsInput | string
  }

  export type SeminarSuggestionCreateInput = {
    seminarId: number
    subjectId: number
  }

  export type SeminarSuggestionUncheckedCreateInput = {
    id?: number
    seminarId: number
    subjectId: number
  }

  export type SeminarSuggestionUpdateInput = {
    seminarId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type SeminarSuggestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    seminarId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type SeminarSuggestionCreateManyInput = {
    id?: number
    seminarId: number
    subjectId: number
  }

  export type SeminarSuggestionUpdateManyMutationInput = {
    seminarId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type SeminarSuggestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    seminarId?: IntFieldUpdateOperationsInput | number
    subjectId?: IntFieldUpdateOperationsInput | number
  }

  export type RoomCreateInput = {
    id: string
    capacity: number
  }

  export type RoomUncheckedCreateInput = {
    id: string
    capacity: number
  }

  export type RoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type RoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type RoomCreateManyInput = {
    id: string
    capacity: number
  }

  export type RoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
  }

  export type RoomTimeEventCreateInput = {
    dateStart: Date | string
    dateEnd: Date | string
    eventId: number
    roomId: string
    EventUserPresence?: EventUserPresenceCreateNestedManyWithoutRoomTimeEventInput
  }

  export type RoomTimeEventUncheckedCreateInput = {
    id?: number
    dateStart: Date | string
    dateEnd: Date | string
    eventId: number
    roomId: string
    EventUserPresence?: EventUserPresenceUncheckedCreateNestedManyWithoutRoomTimeEventInput
  }

  export type RoomTimeEventUpdateInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
    EventUserPresence?: EventUserPresenceUpdateManyWithoutRoomTimeEventNestedInput
  }

  export type RoomTimeEventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
    EventUserPresence?: EventUserPresenceUncheckedUpdateManyWithoutRoomTimeEventNestedInput
  }

  export type RoomTimeEventCreateManyInput = {
    id?: number
    dateStart: Date | string
    dateEnd: Date | string
    eventId: number
    roomId: string
  }

  export type RoomTimeEventUpdateManyMutationInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
  }

  export type RoomTimeEventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
  }

  export type EventUserPresenceCreateInput = {
    presenceStatus: boolean
    roomTimeEvent: RoomTimeEventCreateNestedOneWithoutEventUserPresenceInput
    user: UserCreateNestedOneWithoutEventPresenceInput
  }

  export type EventUserPresenceUncheckedCreateInput = {
    id?: number
    presenceStatus: boolean
    roomTimeEventId: number
    userId: number
  }

  export type EventUserPresenceUpdateInput = {
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    roomTimeEvent?: RoomTimeEventUpdateOneRequiredWithoutEventUserPresenceNestedInput
    user?: UserUpdateOneRequiredWithoutEventPresenceNestedInput
  }

  export type EventUserPresenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    roomTimeEventId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type EventUserPresenceCreateManyInput = {
    id?: number
    presenceStatus: boolean
    roomTimeEventId: number
    userId: number
  }

  export type EventUserPresenceUpdateManyMutationInput = {
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUserPresenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    roomTimeEventId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type EventUserPresenceListRelationFilter = {
    every?: EventUserPresenceWhereInput
    some?: EventUserPresenceWhereInput
    none?: EventUserPresenceWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventUserPresenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    jmbag?: SortOrder
    email?: SortOrder
    status?: SortOrder
    mentorID?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    mentorID?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    jmbag?: SortOrder
    email?: SortOrder
    status?: SortOrder
    mentorID?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    password?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    jmbag?: SortOrder
    email?: SortOrder
    status?: SortOrder
    mentorID?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    mentorID?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type EnumSemesterFilter = {
    equals?: Semester
    in?: Enumerable<Semester>
    notIn?: Enumerable<Semester>
    not?: NestedEnumSemesterFilter | Semester
  }

  export type EnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type SubjectCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ects_bod?: SortOrder
    semester?: SortOrder
    status?: SortOrder
    contentId?: SortOrder
  }

  export type SubjectAvgOrderByAggregateInput = {
    id?: SortOrder
    ects_bod?: SortOrder
    contentId?: SortOrder
  }

  export type SubjectMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ects_bod?: SortOrder
    semester?: SortOrder
    status?: SortOrder
    contentId?: SortOrder
  }

  export type SubjectMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    ects_bod?: SortOrder
    semester?: SortOrder
    status?: SortOrder
    contentId?: SortOrder
  }

  export type SubjectSumOrderByAggregateInput = {
    id?: SortOrder
    ects_bod?: SortOrder
    contentId?: SortOrder
  }

  export type EnumSemesterWithAggregatesFilter = {
    equals?: Semester
    in?: Enumerable<Semester>
    notIn?: Enumerable<Semester>
    not?: NestedEnumSemesterWithAggregatesFilter | Semester
    _count?: NestedIntFilter
    _min?: NestedEnumSemesterFilter
    _max?: NestedEnumSemesterFilter
  }

  export type EnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type EnumLinkedEntityFilter = {
    equals?: LinkedEntity
    in?: Enumerable<LinkedEntity>
    notIn?: Enumerable<LinkedEntity>
    not?: NestedEnumLinkedEntityFilter | LinkedEntity
  }

  export type ContentCountOrderByAggregateInput = {
    id?: SortOrder
    markdownText?: SortOrder
    plainText?: SortOrder
    date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type ContentAvgOrderByAggregateInput = {
    id?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type ContentMaxOrderByAggregateInput = {
    id?: SortOrder
    markdownText?: SortOrder
    plainText?: SortOrder
    date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type ContentMinOrderByAggregateInput = {
    id?: SortOrder
    markdownText?: SortOrder
    plainText?: SortOrder
    date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type ContentSumOrderByAggregateInput = {
    id?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EnumLinkedEntityWithAggregatesFilter = {
    equals?: LinkedEntity
    in?: Enumerable<LinkedEntity>
    notIn?: Enumerable<LinkedEntity>
    not?: NestedEnumLinkedEntityWithAggregatesFilter | LinkedEntity
    _count?: NestedIntFilter
    _min?: NestedEnumLinkedEntityFilter
    _max?: NestedEnumLinkedEntityFilter
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    Date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    Date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    Date?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    linkedEntityId?: SortOrder
    contentId?: SortOrder
    ownerId?: SortOrder
  }

  export type SubjectRelationFilter = {
    is?: SubjectWhereInput
    isNot?: SubjectWhereInput
  }

  export type EnrollmentUserIdSubjectIdCompoundUniqueInput = {
    userId: number
    subjectId: number
  }

  export type EnrollmentCountOrderByAggregateInput = {
    userId?: SortOrder
    subjectId?: SortOrder
    enrollmentDate?: SortOrder
    roleTitle?: SortOrder
    status?: SortOrder
  }

  export type EnrollmentAvgOrderByAggregateInput = {
    userId?: SortOrder
    subjectId?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    userId?: SortOrder
    subjectId?: SortOrder
    enrollmentDate?: SortOrder
    roleTitle?: SortOrder
    status?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    userId?: SortOrder
    subjectId?: SortOrder
    enrollmentDate?: SortOrder
    roleTitle?: SortOrder
    status?: SortOrder
  }

  export type EnrollmentSumOrderByAggregateInput = {
    userId?: SortOrder
    subjectId?: SortOrder
  }

  export type SeminarCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mentorId?: SortOrder
    type?: SortOrder
    contentId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
  }

  export type SeminarAvgOrderByAggregateInput = {
    id?: SortOrder
    mentorId?: SortOrder
  }

  export type SeminarMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mentorId?: SortOrder
    type?: SortOrder
    contentId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
  }

  export type SeminarMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    mentorId?: SortOrder
    type?: SortOrder
    contentId?: SortOrder
    subjectId?: SortOrder
    userId?: SortOrder
  }

  export type SeminarSumOrderByAggregateInput = {
    id?: SortOrder
    mentorId?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    linkedEntity?: SortOrder
    linkedEntityId?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SeminarSuggestionCountOrderByAggregateInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
  }

  export type SeminarSuggestionAvgOrderByAggregateInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
  }

  export type SeminarSuggestionMaxOrderByAggregateInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
  }

  export type SeminarSuggestionMinOrderByAggregateInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
  }

  export type SeminarSuggestionSumOrderByAggregateInput = {
    id?: SortOrder
    seminarId?: SortOrder
    subjectId?: SortOrder
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type RoomTimeEventCountOrderByAggregateInput = {
    id?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    eventId?: SortOrder
    roomId?: SortOrder
  }

  export type RoomTimeEventAvgOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
  }

  export type RoomTimeEventMaxOrderByAggregateInput = {
    id?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    eventId?: SortOrder
    roomId?: SortOrder
  }

  export type RoomTimeEventMinOrderByAggregateInput = {
    id?: SortOrder
    dateStart?: SortOrder
    dateEnd?: SortOrder
    eventId?: SortOrder
    roomId?: SortOrder
  }

  export type RoomTimeEventSumOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type RoomTimeEventRelationFilter = {
    is?: RoomTimeEventWhereInput
    isNot?: RoomTimeEventWhereInput
  }

  export type EventUserPresenceCountOrderByAggregateInput = {
    id?: SortOrder
    presenceStatus?: SortOrder
    roomTimeEventId?: SortOrder
    userId?: SortOrder
  }

  export type EventUserPresenceAvgOrderByAggregateInput = {
    id?: SortOrder
    roomTimeEventId?: SortOrder
    userId?: SortOrder
  }

  export type EventUserPresenceMaxOrderByAggregateInput = {
    id?: SortOrder
    presenceStatus?: SortOrder
    roomTimeEventId?: SortOrder
    userId?: SortOrder
  }

  export type EventUserPresenceMinOrderByAggregateInput = {
    id?: SortOrder
    presenceStatus?: SortOrder
    roomTimeEventId?: SortOrder
    userId?: SortOrder
  }

  export type EventUserPresenceSumOrderByAggregateInput = {
    id?: SortOrder
    roomTimeEventId?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserCreateNestedOneWithoutMenteeIdInput = {
    create?: XOR<UserCreateWithoutMenteeIdInput, UserUncheckedCreateWithoutMenteeIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutMenteeIdInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutMentorInput = {
    create?: XOR<Enumerable<UserCreateWithoutMentorInput>, Enumerable<UserUncheckedCreateWithoutMentorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutMentorInput>
    createMany?: UserCreateManyMentorInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type EnrollmentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    connect?: Enumerable<EnrollmentWhereUniqueInput>
  }

  export type EventUserPresenceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutUserInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutUserInput>
    createMany?: EventUserPresenceCreateManyUserInputEnvelope
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutMentorInput = {
    create?: XOR<Enumerable<UserCreateWithoutMentorInput>, Enumerable<UserUncheckedCreateWithoutMentorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutMentorInput>
    createMany?: UserCreateManyMentorInputEnvelope
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    connect?: Enumerable<EnrollmentWhereUniqueInput>
  }

  export type EventUserPresenceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutUserInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutUserInput>
    createMany?: EventUserPresenceCreateManyUserInputEnvelope
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type UserUpdateOneRequiredWithoutMenteeIdNestedInput = {
    create?: XOR<UserCreateWithoutMenteeIdInput, UserUncheckedCreateWithoutMenteeIdInput>
    connectOrCreate?: UserCreateOrConnectWithoutMenteeIdInput
    upsert?: UserUpsertWithoutMenteeIdInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutMenteeIdInput, UserUncheckedUpdateWithoutMenteeIdInput>
  }

  export type UserUpdateManyWithoutMentorNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutMentorInput>, Enumerable<UserUncheckedCreateWithoutMentorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutMentorInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutMentorInput>
    createMany?: UserCreateManyMentorInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutMentorInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutMentorInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type EnrollmentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EnrollmentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    set?: Enumerable<EnrollmentWhereUniqueInput>
    disconnect?: Enumerable<EnrollmentWhereUniqueInput>
    delete?: Enumerable<EnrollmentWhereUniqueInput>
    connect?: Enumerable<EnrollmentWhereUniqueInput>
    update?: Enumerable<EnrollmentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EnrollmentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EnrollmentScalarWhereInput>
  }

  export type EventUserPresenceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutUserInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EventUserPresenceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EventUserPresenceCreateManyUserInputEnvelope
    set?: Enumerable<EventUserPresenceWhereUniqueInput>
    disconnect?: Enumerable<EventUserPresenceWhereUniqueInput>
    delete?: Enumerable<EventUserPresenceWhereUniqueInput>
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
    update?: Enumerable<EventUserPresenceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EventUserPresenceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EventUserPresenceScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUncheckedUpdateManyWithoutMentorNestedInput = {
    create?: XOR<Enumerable<UserCreateWithoutMentorInput>, Enumerable<UserUncheckedCreateWithoutMentorInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutMentorInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutMentorInput>
    createMany?: UserCreateManyMentorInputEnvelope
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutMentorInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutMentorInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type EnrollmentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutUserInput>, Enumerable<EnrollmentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EnrollmentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EnrollmentCreateManyUserInputEnvelope
    set?: Enumerable<EnrollmentWhereUniqueInput>
    disconnect?: Enumerable<EnrollmentWhereUniqueInput>
    delete?: Enumerable<EnrollmentWhereUniqueInput>
    connect?: Enumerable<EnrollmentWhereUniqueInput>
    update?: Enumerable<EnrollmentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EnrollmentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EnrollmentScalarWhereInput>
  }

  export type EventUserPresenceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutUserInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EventUserPresenceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: EventUserPresenceCreateManyUserInputEnvelope
    set?: Enumerable<EventUserPresenceWhereUniqueInput>
    disconnect?: Enumerable<EventUserPresenceWhereUniqueInput>
    delete?: Enumerable<EventUserPresenceWhereUniqueInput>
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
    update?: Enumerable<EventUserPresenceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EventUserPresenceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EventUserPresenceScalarWhereInput>
  }

  export type EnrollmentCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutSubjectInput>, Enumerable<EnrollmentUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutSubjectInput>
    createMany?: EnrollmentCreateManySubjectInputEnvelope
    connect?: Enumerable<EnrollmentWhereUniqueInput>
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutSubjectInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutSubjectInput>, Enumerable<EnrollmentUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutSubjectInput>
    createMany?: EnrollmentCreateManySubjectInputEnvelope
    connect?: Enumerable<EnrollmentWhereUniqueInput>
  }

  export type EnumSemesterFieldUpdateOperationsInput = {
    set?: Semester
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: Status
  }

  export type EnrollmentUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutSubjectInput>, Enumerable<EnrollmentUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<EnrollmentUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: EnrollmentCreateManySubjectInputEnvelope
    set?: Enumerable<EnrollmentWhereUniqueInput>
    disconnect?: Enumerable<EnrollmentWhereUniqueInput>
    delete?: Enumerable<EnrollmentWhereUniqueInput>
    connect?: Enumerable<EnrollmentWhereUniqueInput>
    update?: Enumerable<EnrollmentUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<EnrollmentUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<EnrollmentScalarWhereInput>
  }

  export type EnrollmentUncheckedUpdateManyWithoutSubjectNestedInput = {
    create?: XOR<Enumerable<EnrollmentCreateWithoutSubjectInput>, Enumerable<EnrollmentUncheckedCreateWithoutSubjectInput>>
    connectOrCreate?: Enumerable<EnrollmentCreateOrConnectWithoutSubjectInput>
    upsert?: Enumerable<EnrollmentUpsertWithWhereUniqueWithoutSubjectInput>
    createMany?: EnrollmentCreateManySubjectInputEnvelope
    set?: Enumerable<EnrollmentWhereUniqueInput>
    disconnect?: Enumerable<EnrollmentWhereUniqueInput>
    delete?: Enumerable<EnrollmentWhereUniqueInput>
    connect?: Enumerable<EnrollmentWhereUniqueInput>
    update?: Enumerable<EnrollmentUpdateWithWhereUniqueWithoutSubjectInput>
    updateMany?: Enumerable<EnrollmentUpdateManyWithWhereWithoutSubjectInput>
    deleteMany?: Enumerable<EnrollmentScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumLinkedEntityFieldUpdateOperationsInput = {
    set?: LinkedEntity
  }

  export type UserCreateNestedOneWithoutEnrolledInput = {
    create?: XOR<UserCreateWithoutEnrolledInput, UserUncheckedCreateWithoutEnrolledInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrolledInput
    connect?: UserWhereUniqueInput
  }

  export type SubjectCreateNestedOneWithoutEnrollmentInput = {
    create?: XOR<SubjectCreateWithoutEnrollmentInput, SubjectUncheckedCreateWithoutEnrollmentInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutEnrollmentInput
    connect?: SubjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEnrolledNestedInput = {
    create?: XOR<UserCreateWithoutEnrolledInput, UserUncheckedCreateWithoutEnrolledInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrolledInput
    upsert?: UserUpsertWithoutEnrolledInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEnrolledInput, UserUncheckedUpdateWithoutEnrolledInput>
  }

  export type SubjectUpdateOneRequiredWithoutEnrollmentNestedInput = {
    create?: XOR<SubjectCreateWithoutEnrollmentInput, SubjectUncheckedCreateWithoutEnrollmentInput>
    connectOrCreate?: SubjectCreateOrConnectWithoutEnrollmentInput
    upsert?: SubjectUpsertWithoutEnrollmentInput
    connect?: SubjectWhereUniqueInput
    update?: XOR<SubjectUpdateWithoutEnrollmentInput, SubjectUncheckedUpdateWithoutEnrollmentInput>
  }

  export type EventUserPresenceCreateNestedManyWithoutRoomTimeEventInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutRoomTimeEventInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutRoomTimeEventInput>
    createMany?: EventUserPresenceCreateManyRoomTimeEventInputEnvelope
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
  }

  export type EventUserPresenceUncheckedCreateNestedManyWithoutRoomTimeEventInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutRoomTimeEventInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutRoomTimeEventInput>
    createMany?: EventUserPresenceCreateManyRoomTimeEventInputEnvelope
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
  }

  export type EventUserPresenceUpdateManyWithoutRoomTimeEventNestedInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutRoomTimeEventInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutRoomTimeEventInput>
    upsert?: Enumerable<EventUserPresenceUpsertWithWhereUniqueWithoutRoomTimeEventInput>
    createMany?: EventUserPresenceCreateManyRoomTimeEventInputEnvelope
    set?: Enumerable<EventUserPresenceWhereUniqueInput>
    disconnect?: Enumerable<EventUserPresenceWhereUniqueInput>
    delete?: Enumerable<EventUserPresenceWhereUniqueInput>
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
    update?: Enumerable<EventUserPresenceUpdateWithWhereUniqueWithoutRoomTimeEventInput>
    updateMany?: Enumerable<EventUserPresenceUpdateManyWithWhereWithoutRoomTimeEventInput>
    deleteMany?: Enumerable<EventUserPresenceScalarWhereInput>
  }

  export type EventUserPresenceUncheckedUpdateManyWithoutRoomTimeEventNestedInput = {
    create?: XOR<Enumerable<EventUserPresenceCreateWithoutRoomTimeEventInput>, Enumerable<EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput>>
    connectOrCreate?: Enumerable<EventUserPresenceCreateOrConnectWithoutRoomTimeEventInput>
    upsert?: Enumerable<EventUserPresenceUpsertWithWhereUniqueWithoutRoomTimeEventInput>
    createMany?: EventUserPresenceCreateManyRoomTimeEventInputEnvelope
    set?: Enumerable<EventUserPresenceWhereUniqueInput>
    disconnect?: Enumerable<EventUserPresenceWhereUniqueInput>
    delete?: Enumerable<EventUserPresenceWhereUniqueInput>
    connect?: Enumerable<EventUserPresenceWhereUniqueInput>
    update?: Enumerable<EventUserPresenceUpdateWithWhereUniqueWithoutRoomTimeEventInput>
    updateMany?: Enumerable<EventUserPresenceUpdateManyWithWhereWithoutRoomTimeEventInput>
    deleteMany?: Enumerable<EventUserPresenceScalarWhereInput>
  }

  export type RoomTimeEventCreateNestedOneWithoutEventUserPresenceInput = {
    create?: XOR<RoomTimeEventCreateWithoutEventUserPresenceInput, RoomTimeEventUncheckedCreateWithoutEventUserPresenceInput>
    connectOrCreate?: RoomTimeEventCreateOrConnectWithoutEventUserPresenceInput
    connect?: RoomTimeEventWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEventPresenceInput = {
    create?: XOR<UserCreateWithoutEventPresenceInput, UserUncheckedCreateWithoutEventPresenceInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventPresenceInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RoomTimeEventUpdateOneRequiredWithoutEventUserPresenceNestedInput = {
    create?: XOR<RoomTimeEventCreateWithoutEventUserPresenceInput, RoomTimeEventUncheckedCreateWithoutEventUserPresenceInput>
    connectOrCreate?: RoomTimeEventCreateOrConnectWithoutEventUserPresenceInput
    upsert?: RoomTimeEventUpsertWithoutEventUserPresenceInput
    connect?: RoomTimeEventWhereUniqueInput
    update?: XOR<RoomTimeEventUpdateWithoutEventUserPresenceInput, RoomTimeEventUncheckedUpdateWithoutEventUserPresenceInput>
  }

  export type UserUpdateOneRequiredWithoutEventPresenceNestedInput = {
    create?: XOR<UserCreateWithoutEventPresenceInput, UserUncheckedCreateWithoutEventPresenceInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventPresenceInput
    upsert?: UserUpsertWithoutEventPresenceInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutEventPresenceInput, UserUncheckedUpdateWithoutEventPresenceInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedEnumSemesterFilter = {
    equals?: Semester
    in?: Enumerable<Semester>
    notIn?: Enumerable<Semester>
    not?: NestedEnumSemesterFilter | Semester
  }

  export type NestedEnumStatusFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusFilter | Status
  }

  export type NestedEnumSemesterWithAggregatesFilter = {
    equals?: Semester
    in?: Enumerable<Semester>
    notIn?: Enumerable<Semester>
    not?: NestedEnumSemesterWithAggregatesFilter | Semester
    _count?: NestedIntFilter
    _min?: NestedEnumSemesterFilter
    _max?: NestedEnumSemesterFilter
  }

  export type NestedEnumStatusWithAggregatesFilter = {
    equals?: Status
    in?: Enumerable<Status>
    notIn?: Enumerable<Status>
    not?: NestedEnumStatusWithAggregatesFilter | Status
    _count?: NestedIntFilter
    _min?: NestedEnumStatusFilter
    _max?: NestedEnumStatusFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumLinkedEntityFilter = {
    equals?: LinkedEntity
    in?: Enumerable<LinkedEntity>
    notIn?: Enumerable<LinkedEntity>
    not?: NestedEnumLinkedEntityFilter | LinkedEntity
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumLinkedEntityWithAggregatesFilter = {
    equals?: LinkedEntity
    in?: Enumerable<LinkedEntity>
    notIn?: Enumerable<LinkedEntity>
    not?: NestedEnumLinkedEntityWithAggregatesFilter | LinkedEntity
    _count?: NestedIntFilter
    _min?: NestedEnumLinkedEntityFilter
    _max?: NestedEnumLinkedEntityFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserCreateWithoutMenteeIdInput = {
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentor: UserCreateNestedOneWithoutMenteeIdInput
    Enrolled?: EnrollmentCreateNestedManyWithoutUserInput
    EventPresence?: EventUserPresenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMenteeIdInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentorID: number
    Enrolled?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    EventPresence?: EventUserPresenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMenteeIdInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMenteeIdInput, UserUncheckedCreateWithoutMenteeIdInput>
  }

  export type UserCreateWithoutMentorInput = {
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    menteeId?: UserCreateNestedManyWithoutMentorInput
    Enrolled?: EnrollmentCreateNestedManyWithoutUserInput
    EventPresence?: EventUserPresenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMentorInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    menteeId?: UserUncheckedCreateNestedManyWithoutMentorInput
    Enrolled?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
    EventPresence?: EventUserPresenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMentorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMentorInput, UserUncheckedCreateWithoutMentorInput>
  }

  export type UserCreateManyMentorInputEnvelope = {
    data: Enumerable<UserCreateManyMentorInput>
    skipDuplicates?: boolean
  }

  export type EnrollmentCreateWithoutUserInput = {
    subject: SubjectCreateNestedOneWithoutEnrollmentInput
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentUncheckedCreateWithoutUserInput = {
    subjectId: number
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentCreateOrConnectWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentCreateManyUserInputEnvelope = {
    data: Enumerable<EnrollmentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type EventUserPresenceCreateWithoutUserInput = {
    presenceStatus: boolean
    roomTimeEvent: RoomTimeEventCreateNestedOneWithoutEventUserPresenceInput
  }

  export type EventUserPresenceUncheckedCreateWithoutUserInput = {
    id?: number
    presenceStatus: boolean
    roomTimeEventId: number
  }

  export type EventUserPresenceCreateOrConnectWithoutUserInput = {
    where: EventUserPresenceWhereUniqueInput
    create: XOR<EventUserPresenceCreateWithoutUserInput, EventUserPresenceUncheckedCreateWithoutUserInput>
  }

  export type EventUserPresenceCreateManyUserInputEnvelope = {
    data: Enumerable<EventUserPresenceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMenteeIdInput = {
    update: XOR<UserUpdateWithoutMenteeIdInput, UserUncheckedUpdateWithoutMenteeIdInput>
    create: XOR<UserCreateWithoutMenteeIdInput, UserUncheckedCreateWithoutMenteeIdInput>
  }

  export type UserUpdateWithoutMenteeIdInput = {
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentor?: UserUpdateOneRequiredWithoutMenteeIdNestedInput
    Enrolled?: EnrollmentUpdateManyWithoutUserNestedInput
    EventPresence?: EventUserPresenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMenteeIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentorID?: IntFieldUpdateOperationsInput | number
    Enrolled?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    EventPresence?: EventUserPresenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutMentorInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutMentorInput, UserUncheckedUpdateWithoutMentorInput>
    create: XOR<UserCreateWithoutMentorInput, UserUncheckedCreateWithoutMentorInput>
  }

  export type UserUpdateWithWhereUniqueWithoutMentorInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutMentorInput, UserUncheckedUpdateWithoutMentorInput>
  }

  export type UserUpdateManyWithWhereWithoutMentorInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutMenteeIdInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    password?: StringFilter | string
    firstname?: StringFilter | string
    lastname?: StringFilter | string
    jmbag?: StringFilter | string
    email?: StringFilter | string
    status?: EnumRoleFilter | Role
    mentorID?: IntFilter | number
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutUserInput, EnrollmentUncheckedUpdateWithoutUserInput>
    create: XOR<EnrollmentCreateWithoutUserInput, EnrollmentUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutUserInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutUserInput, EnrollmentUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutUserInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutEnrolledInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: Enumerable<EnrollmentScalarWhereInput>
    OR?: Enumerable<EnrollmentScalarWhereInput>
    NOT?: Enumerable<EnrollmentScalarWhereInput>
    userId?: IntFilter | number
    subjectId?: IntFilter | number
    enrollmentDate?: DateTimeFilter | Date | string
    roleTitle?: EnumRoleFilter | Role
    status?: EnumStatusFilter | Status
  }

  export type EventUserPresenceUpsertWithWhereUniqueWithoutUserInput = {
    where: EventUserPresenceWhereUniqueInput
    update: XOR<EventUserPresenceUpdateWithoutUserInput, EventUserPresenceUncheckedUpdateWithoutUserInput>
    create: XOR<EventUserPresenceCreateWithoutUserInput, EventUserPresenceUncheckedCreateWithoutUserInput>
  }

  export type EventUserPresenceUpdateWithWhereUniqueWithoutUserInput = {
    where: EventUserPresenceWhereUniqueInput
    data: XOR<EventUserPresenceUpdateWithoutUserInput, EventUserPresenceUncheckedUpdateWithoutUserInput>
  }

  export type EventUserPresenceUpdateManyWithWhereWithoutUserInput = {
    where: EventUserPresenceScalarWhereInput
    data: XOR<EventUserPresenceUpdateManyMutationInput, EventUserPresenceUncheckedUpdateManyWithoutEventPresenceInput>
  }

  export type EventUserPresenceScalarWhereInput = {
    AND?: Enumerable<EventUserPresenceScalarWhereInput>
    OR?: Enumerable<EventUserPresenceScalarWhereInput>
    NOT?: Enumerable<EventUserPresenceScalarWhereInput>
    id?: IntFilter | number
    presenceStatus?: BoolFilter | boolean
    roomTimeEventId?: IntFilter | number
    userId?: IntFilter | number
  }

  export type EnrollmentCreateWithoutSubjectInput = {
    user: UserCreateNestedOneWithoutEnrolledInput
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentUncheckedCreateWithoutSubjectInput = {
    userId: number
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentCreateOrConnectWithoutSubjectInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutSubjectInput, EnrollmentUncheckedCreateWithoutSubjectInput>
  }

  export type EnrollmentCreateManySubjectInputEnvelope = {
    data: Enumerable<EnrollmentCreateManySubjectInput>
    skipDuplicates?: boolean
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutSubjectInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutSubjectInput, EnrollmentUncheckedUpdateWithoutSubjectInput>
    create: XOR<EnrollmentCreateWithoutSubjectInput, EnrollmentUncheckedCreateWithoutSubjectInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutSubjectInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutSubjectInput, EnrollmentUncheckedUpdateWithoutSubjectInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutSubjectInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutEnrollmentInput>
  }

  export type UserCreateWithoutEnrolledInput = {
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentor: UserCreateNestedOneWithoutMenteeIdInput
    menteeId?: UserCreateNestedManyWithoutMentorInput
    EventPresence?: EventUserPresenceCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnrolledInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentorID: number
    menteeId?: UserUncheckedCreateNestedManyWithoutMentorInput
    EventPresence?: EventUserPresenceUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnrolledInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrolledInput, UserUncheckedCreateWithoutEnrolledInput>
  }

  export type SubjectCreateWithoutEnrollmentInput = {
    title: string
    description: string
    ects_bod: number
    semester: Semester
    status: Status
    contentId: number
  }

  export type SubjectUncheckedCreateWithoutEnrollmentInput = {
    id?: number
    title: string
    description: string
    ects_bod: number
    semester: Semester
    status: Status
    contentId: number
  }

  export type SubjectCreateOrConnectWithoutEnrollmentInput = {
    where: SubjectWhereUniqueInput
    create: XOR<SubjectCreateWithoutEnrollmentInput, SubjectUncheckedCreateWithoutEnrollmentInput>
  }

  export type UserUpsertWithoutEnrolledInput = {
    update: XOR<UserUpdateWithoutEnrolledInput, UserUncheckedUpdateWithoutEnrolledInput>
    create: XOR<UserCreateWithoutEnrolledInput, UserUncheckedCreateWithoutEnrolledInput>
  }

  export type UserUpdateWithoutEnrolledInput = {
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentor?: UserUpdateOneRequiredWithoutMenteeIdNestedInput
    menteeId?: UserUpdateManyWithoutMentorNestedInput
    EventPresence?: EventUserPresenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrolledInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentorID?: IntFieldUpdateOperationsInput | number
    menteeId?: UserUncheckedUpdateManyWithoutMentorNestedInput
    EventPresence?: EventUserPresenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubjectUpsertWithoutEnrollmentInput = {
    update: XOR<SubjectUpdateWithoutEnrollmentInput, SubjectUncheckedUpdateWithoutEnrollmentInput>
    create: XOR<SubjectCreateWithoutEnrollmentInput, SubjectUncheckedCreateWithoutEnrollmentInput>
  }

  export type SubjectUpdateWithoutEnrollmentInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects_bod?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterFieldUpdateOperationsInput | Semester
    status?: EnumStatusFieldUpdateOperationsInput | Status
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type SubjectUncheckedUpdateWithoutEnrollmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    ects_bod?: IntFieldUpdateOperationsInput | number
    semester?: EnumSemesterFieldUpdateOperationsInput | Semester
    status?: EnumStatusFieldUpdateOperationsInput | Status
    contentId?: IntFieldUpdateOperationsInput | number
  }

  export type EventUserPresenceCreateWithoutRoomTimeEventInput = {
    presenceStatus: boolean
    user: UserCreateNestedOneWithoutEventPresenceInput
  }

  export type EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput = {
    id?: number
    presenceStatus: boolean
    userId: number
  }

  export type EventUserPresenceCreateOrConnectWithoutRoomTimeEventInput = {
    where: EventUserPresenceWhereUniqueInput
    create: XOR<EventUserPresenceCreateWithoutRoomTimeEventInput, EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput>
  }

  export type EventUserPresenceCreateManyRoomTimeEventInputEnvelope = {
    data: Enumerable<EventUserPresenceCreateManyRoomTimeEventInput>
    skipDuplicates?: boolean
  }

  export type EventUserPresenceUpsertWithWhereUniqueWithoutRoomTimeEventInput = {
    where: EventUserPresenceWhereUniqueInput
    update: XOR<EventUserPresenceUpdateWithoutRoomTimeEventInput, EventUserPresenceUncheckedUpdateWithoutRoomTimeEventInput>
    create: XOR<EventUserPresenceCreateWithoutRoomTimeEventInput, EventUserPresenceUncheckedCreateWithoutRoomTimeEventInput>
  }

  export type EventUserPresenceUpdateWithWhereUniqueWithoutRoomTimeEventInput = {
    where: EventUserPresenceWhereUniqueInput
    data: XOR<EventUserPresenceUpdateWithoutRoomTimeEventInput, EventUserPresenceUncheckedUpdateWithoutRoomTimeEventInput>
  }

  export type EventUserPresenceUpdateManyWithWhereWithoutRoomTimeEventInput = {
    where: EventUserPresenceScalarWhereInput
    data: XOR<EventUserPresenceUpdateManyMutationInput, EventUserPresenceUncheckedUpdateManyWithoutEventUserPresenceInput>
  }

  export type RoomTimeEventCreateWithoutEventUserPresenceInput = {
    dateStart: Date | string
    dateEnd: Date | string
    eventId: number
    roomId: string
  }

  export type RoomTimeEventUncheckedCreateWithoutEventUserPresenceInput = {
    id?: number
    dateStart: Date | string
    dateEnd: Date | string
    eventId: number
    roomId: string
  }

  export type RoomTimeEventCreateOrConnectWithoutEventUserPresenceInput = {
    where: RoomTimeEventWhereUniqueInput
    create: XOR<RoomTimeEventCreateWithoutEventUserPresenceInput, RoomTimeEventUncheckedCreateWithoutEventUserPresenceInput>
  }

  export type UserCreateWithoutEventPresenceInput = {
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentor: UserCreateNestedOneWithoutMenteeIdInput
    menteeId?: UserCreateNestedManyWithoutMentorInput
    Enrolled?: EnrollmentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventPresenceInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
    mentorID: number
    menteeId?: UserUncheckedCreateNestedManyWithoutMentorInput
    Enrolled?: EnrollmentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventPresenceInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventPresenceInput, UserUncheckedCreateWithoutEventPresenceInput>
  }

  export type RoomTimeEventUpsertWithoutEventUserPresenceInput = {
    update: XOR<RoomTimeEventUpdateWithoutEventUserPresenceInput, RoomTimeEventUncheckedUpdateWithoutEventUserPresenceInput>
    create: XOR<RoomTimeEventCreateWithoutEventUserPresenceInput, RoomTimeEventUncheckedCreateWithoutEventUserPresenceInput>
  }

  export type RoomTimeEventUpdateWithoutEventUserPresenceInput = {
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
  }

  export type RoomTimeEventUncheckedUpdateWithoutEventUserPresenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateStart?: DateTimeFieldUpdateOperationsInput | Date | string
    dateEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    eventId?: IntFieldUpdateOperationsInput | number
    roomId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutEventPresenceInput = {
    update: XOR<UserUpdateWithoutEventPresenceInput, UserUncheckedUpdateWithoutEventPresenceInput>
    create: XOR<UserCreateWithoutEventPresenceInput, UserUncheckedCreateWithoutEventPresenceInput>
  }

  export type UserUpdateWithoutEventPresenceInput = {
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentor?: UserUpdateOneRequiredWithoutMenteeIdNestedInput
    menteeId?: UserUpdateManyWithoutMentorNestedInput
    Enrolled?: EnrollmentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventPresenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    mentorID?: IntFieldUpdateOperationsInput | number
    menteeId?: UserUncheckedUpdateManyWithoutMentorNestedInput
    Enrolled?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyMentorInput = {
    id?: number
    password: string
    firstname: string
    lastname: string
    jmbag: string
    email: string
    status: Role
  }

  export type EnrollmentCreateManyUserInput = {
    subjectId: number
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EventUserPresenceCreateManyUserInput = {
    id?: number
    presenceStatus: boolean
    roomTimeEventId: number
  }

  export type UserUpdateWithoutMentorInput = {
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    menteeId?: UserUpdateManyWithoutMentorNestedInput
    Enrolled?: EnrollmentUpdateManyWithoutUserNestedInput
    EventPresence?: EventUserPresenceUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMentorInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
    menteeId?: UserUncheckedUpdateManyWithoutMentorNestedInput
    Enrolled?: EnrollmentUncheckedUpdateManyWithoutUserNestedInput
    EventPresence?: EventUserPresenceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutMenteeIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    jmbag?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    status?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type EnrollmentUpdateWithoutUserInput = {
    subject?: SubjectUpdateOneRequiredWithoutEnrollmentNestedInput
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentUncheckedUpdateWithoutUserInput = {
    subjectId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentUncheckedUpdateManyWithoutEnrolledInput = {
    subjectId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EventUserPresenceUpdateWithoutUserInput = {
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    roomTimeEvent?: RoomTimeEventUpdateOneRequiredWithoutEventUserPresenceNestedInput
  }

  export type EventUserPresenceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    roomTimeEventId?: IntFieldUpdateOperationsInput | number
  }

  export type EventUserPresenceUncheckedUpdateManyWithoutEventPresenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    roomTimeEventId?: IntFieldUpdateOperationsInput | number
  }

  export type EnrollmentCreateManySubjectInput = {
    userId: number
    enrollmentDate?: Date | string
    roleTitle: Role
    status: Status
  }

  export type EnrollmentUpdateWithoutSubjectInput = {
    user?: UserUpdateOneRequiredWithoutEnrolledNestedInput
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentUncheckedUpdateWithoutSubjectInput = {
    userId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EnrollmentUncheckedUpdateManyWithoutEnrollmentInput = {
    userId?: IntFieldUpdateOperationsInput | number
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    roleTitle?: EnumRoleFieldUpdateOperationsInput | Role
    status?: EnumStatusFieldUpdateOperationsInput | Status
  }

  export type EventUserPresenceCreateManyRoomTimeEventInput = {
    id?: number
    presenceStatus: boolean
    userId: number
  }

  export type EventUserPresenceUpdateWithoutRoomTimeEventInput = {
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutEventPresenceNestedInput
  }

  export type EventUserPresenceUncheckedUpdateWithoutRoomTimeEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type EventUserPresenceUncheckedUpdateManyWithoutEventUserPresenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    presenceStatus?: BoolFieldUpdateOperationsInput | boolean
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}