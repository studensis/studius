@startuml UMLclass

top to bottom direction

class EventUserPresence {
    id: String
    presenceStatus: Boolean
    roomTimeEventId: String
    userId: String
    RoomTimeEvent: RoomTimeEvent
    User: User 
    createEventUserPresenceInteractor()
    deleteEventUserPresenceInteractor()
    getAssociatedRoomTimeEventInteractor()
    listEventUserPresencesInteractor()
    updateEventUserPresenceInteractor()
    
}

class Content{
    -id:String 
    -Markdown_text:String
    -plain_text:String
    -date:Date
    -LinkedEntity: LinkedEntity
    -LinkedEntityID: String
    createContentInteractor()
    deleteContentInteractor()
    getContentInteractor()
    listContentsInteractor()
    updateContentInteractor()
}

class Post{
    -id:String
    -title:String 
    -date:Date
    -ownerId: String
    -owner: User 
    -LinkedEntity:String
    -LinkedEntityID:String
    -contentId: String
    createPostInteractor()
    deletePostInteractor()
    getPostInteractor()
    listPostsInteractor()
    updatePostInteractor()

}

class User {
    -id:String 
    -password: String
    -firstname:String
    -lastname:String
    -jmbag: String
    -userRole: Role
    -mentorId: String
    -enrollment: Enrollment
    -EventUserPresence: EventUserPresence
    -mentor: User
    -mentee: User
    -email:String 
    -content :Content
    -contentId: String
    createUserInteractor()
    deleteUserInteractor()
    enrollUserInteractor()
    getUserByEmailInteractor()
    getUserInteractor()
    listEnrolledSubjectsInteractor()
    listMenteeInteractor()
    listUsersInteractor()
    updateEnrollmentInteractor()
    updateUserInteractor()
}

class PinnedEvent { 
    -id:String
    -subjectId: String
    -eventId: String
    createPinnedEventInteractor()
    deletePinnedEventInteractor()
    getPinnedEventInteractor()
    listPinnedEventsInteractor()
    updatePinnedEventInteractor()
}

class Event { 
    -id:String 
    -title:String 
    -description:String 
    -LinkedEntity:LinkedEntity
    -LinkedEntityID: String 
    -status: Status
    -RoomTimeEvent: RoomTimeEvent
    createEventInteractor()
    deleteEventInteractor()
    getEventInteractor()
    listAssociatedRoomTimeEventsInteractor()
    listEventsInteractor()
    updateEventInteractor()
}

class Room { 
    -id:String 
    -title: String
    -capacity:int 
    -RoomTimeEvent: RoomTimeEvent
    createRoomInteractor()
    deleteRoomInteractor()
    getRoomInteractor()
    listRoomsInteractor()
    updateRoomInteractor()
}

class RoomTimeEvent {
    -id:String 
    -dateStart: Date
    -dateEnd: Date
    -status: Status
    -roomId: String
    -room: Room
    -eventId: String
    -event: Event 
    -EventUserPresence: EventUserPresence
    createRoomTimeEventInteractor()
    deleteRoomTimeEventInteractor()
    getRoomTimeEventInteractor()
    listAssociatedEventUserPresencesInteractors()
    listRoomTimeEventsInteractor()
    updateRoomTimeEventInteractor()
}

class Enrollment { 
    -id: String
    -subjectId: String
    -subject: Subject
    -userId: String
    -user: User
    -enrollmentDate: Date
    -status: status
    -roleTitle: subjectRole

}

class Seminar { 
    -id:String
    -title:String 
    -description:String 
    -userId: String
    -mentorId:String 
    -contentId: String
    -subjectId: String
    -status: SeminarStatus
    approveSeminarInteractor()
    createSeminarInteractor()
    deleteSeminarInteractor()
    getSeminarInteractor()
    listSeminarsInteractor()
    updateSeminarInteractor()

}

class Subject { 
    -id: String 
    -title: String 
    -description: String 
    -semester: semester
    -ectsBod: String 
    -status: status
    -contentId: String
    -Enrollment: Enrollment 
    addContentInteractor()
    createSubjectInteractor()
    deleteSubjectInteractor()
    getSubjectInteractor()
    listEnrolledUsersInteractor()
    listSubjectsInteractor()
    updateSubjectInteractor()
}


enum LinkedEntity { 
    SUBJECT
    SEMINAR
    USER
    POST
}

enum semester { 
    SUMMER  
    WINTER 
}
enum status { 
    ACTIVE
    ARCHIVED
}

enum SeminarStatus {
    DRAFT 
    READY
    CONFIRMED
}

enum Role {
    DEFAULT
    ADMIN
    SUPERADMIN
}



enum subjectRole { 
    PROFESSOR
    STUDENT
    OWNER
    DEMONSTRATOR
    ASSISTANT
}


Content "1" ---* "1" Post
Content "1.." --- "1" Subject
Content "1" ---* "1" User
Content "1" ---* "1" Seminar

User "0.." - "1.." Subject
(User, Subject) .. Enrollment  

Seminar "1" -right- "1.." PinnedEvent
Seminar "1" --> "1" Event
Event "1" --> "*" RoomTimeEvent
Room "1" --> "*" RoomTimeEvent

User "1" ----> "*" EventUserPresence
EventUserPresence "*" -right-> "1" RoomTimeEvent

User -left> Role 
Subject --> subjectRole
Subject -right> status
Subject --> semester
presenceStatus <- EventUserPresence
Post ---> LinkedEntity
Event -> LinkedEntity

@enduml