// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  password          String
  firstname         String
  lastname          String
  jmbag             String?             @unique
  email             String              @unique
  userRole          Role
  mentorID          String?
  mentor            User?               @relation("Mentorstvo", fields: [mentorID], references: [id])
  mentee            User[]              @relation("Mentorstvo")
  enrollment        Enrollment[]
  eventUserPresence EventUserPresence[]
}

// treba stavit @unique na neke

model Subject {
  id          String       @id @default(uuid())
  title       String       @unique
  description String
  ectsBod     String
  semester    Semester
  status      Status
  contentId   String[]
  Enrollment  Enrollment[]
}

model Content {
  id             String       @id @default(uuid())
  markdownText   String
  plainText      String
  date           DateTime?    @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId String
}

model Post {
  id             String       @id @default(uuid())
  title          String
  date           DateTime?    @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId String
  contentId      String
  ownerId        String
}

model Enrollment {
  user           User        @relation(fields: [userId], references: [id])
  userId         String
  subject        Subject     @relation(fields: [subjectId], references: [id])
  subjectId      String
  enrollmentDate DateTime    @default(now())
  roleTitle      SubjectRole
  status         Status

  @@id([userId, subjectId])
}

model Seminar {
  id          String @id @default(uuid())
  title       String @unique
  description String
  mentorId    String
  contentId   String
  subjectId   String
  userId      String
  status      SeminarStatus
}

model Event {
  id             String       @id @default(uuid())
  title          String
  description    String
  linkedEntity   LinkedEntity
  linkedEntityId String
}

model PinnedEvent {
  id        String @id @default(uuid())
  subjectId String
  eventId   String
}

model Room {
  id       String @id @default(uuid())
  title    String @default("")
  capacity Int
}

model RoomTimeEvent {
  id                String              @id @default(uuid())
  dateStart         DateTime
  dateEnd           DateTime
  eventId           String
  roomId            String
  EventUserPresence EventUserPresence[]
}

model EventUserPresence {
  id              String        @id @default(uuid())
  presenceStatus  Boolean
  // presenceStatus  RSVP
  roomTimeEvent   RoomTimeEvent @relation(fields: [roomTimeEventId], references: [id])
  roomTimeEventId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
}

enum Role {
  DEFAULT
  ADMIN
  SUPERADMIN
}

enum SubjectRole {
  STUDENT
  PROFESSOR
  OWNER
  DEMONSTRATOR
  ASSISTANT
}

enum Semester {
  WINTER
  SUMMER
}

enum Status {
  ACTIVE
  ARCHIVED
}

enum SeminarStatus {
  DRAFT
  CONFIRMED
}

// enum RSVP {
//   PRESENT
//   COMING
//   CONFIRMED
//   DECLINED
//   TENTATIVE
// }

enum LinkedEntity {
  USER
  SUBJECT
  SEMINAR
  POST
}
