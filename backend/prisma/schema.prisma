generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  password     String
  firstname    String
  lastname     String
  jmbag        String?        @unique
  email        String         @unique
  userRole     Role
  mentorID     String?
  avatar       String?
  enrollment   Enrollment[]
  userPresence UserPresence[]
  mentor       User?          @relation("Mentorstvo", fields: [mentorID], references: [id])
  mentee       User[]         @relation("Mentorstvo")
  googleUserId String?        @unique
}

model Subject {
  id          String        @id @default(uuid())
  title       String        @unique
  description String
  ectsBod     String
  semester    Semester
  status      Status
  contentId   String[]
  Enrollment  Enrollment[]
  PinnedEvent PinnedEvent[]
}

model Content {
  id             String       @id @default(uuid())
  markdownText   String
  plainText      String
  date           DateTime?    @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId String
}

model Post {
  id             String       @id @default(uuid())
  title          String
  date           DateTime?    @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId String
  contentId      String
  ownerId        String
}

model Enrollment {
  userId         String
  subjectId      String
  enrollmentDate DateTime    @default(now())
  roleTitle      SubjectRole
  status         Status      @default(ACTIVE)
  id             String      @id @default(uuid())
  subject        Subject     @relation(fields: [subjectId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
}

model Assignment {
  id               String           @id @default(uuid())
  title            String           @unique
  description      String
  mentorId         String?
  contentId        String?
  subjectId        String?
  userId           String?
  deadline         DateTime?
  type             AssignmentType   @default(HOMEWORK)
  assignmentStatus AssignmentStatus @default(DRAFT)
  status           Status           @default(ACTIVE)
}

model Event {
  id             String        @id @default(uuid())
  title          String
  description    String
  linkedEntity   LinkedEntity
  linkedEntityId String
  status         Status        @default(ACTIVE)
  Schedule       Schedule[]
  PinnedEvent    PinnedEvent[]
}

model PinnedEvent {
  id        String  @id @default(uuid())
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id])
  eventId   String
  event     Event   @relation(fields: [eventId], references: [id])
}

model Room {
  id       String     @id @default(uuid())
  title    String     @default("")
  capacity Int
  Schedule Schedule[]
}

model Schedule {
  id           String         @id @default(uuid())
  dateStart    DateTime
  dateEnd      DateTime
  eventId      String
  roomId       String
  status       Status         @default(ACTIVE)
  UserPresence UserPresence[]
  event        Event          @relation(fields: [eventId], references: [id])
  room         Room           @relation(fields: [roomId], references: [id])
}

model UserPresence {
  id             String   @id @default(uuid())
  presenceStatus Boolean
  scheduleId     String
  userId         String
  schedule       Schedule @relation(fields: [scheduleId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
}

enum Role {
  DEFAULT
  ADMIN
  SUPERADMIN
}

enum SubjectRole {
  STUDENT
  PROFESSOR
  OWNER
  DEMONSTRATOR
  ASSISTANT
}

enum Semester {
  WINTER
  SUMMER
}

enum Status {
  ACTIVE
  ARCHIVED
}

enum AssignmentStatus {
  DRAFT
  CONFIRMED
  READY
}

enum LinkedEntity {
  USER
  SUBJECT
  SEMINAR
  POST
}

enum AssignmentType {
  SEMINAR
  HOMEWORK
  PRACTICAL
}
