generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  password          String
  firstname         String
  lastname          String
  jmbag             String?             @unique
  email             String              @unique
  avatar            String?
  userRole          Role
  mentorID          String?
  enrollment        Enrollment[]
  eventUserPresence EventUserPresence[]
  mentor            User?               @relation("Mentorstvo", fields: [mentorID], references: [id])
  mentee            User[]              @relation("Mentorstvo")
}

model Subject {
  id          String       @id @default(uuid())
  title       String       @unique
  description String
  ectsBod     String
  semester    Semester
  status      Status
  contentId   String[]
  Enrollment  Enrollment[]
}

model Content {
  id             String       @id @default(uuid())
  markdownText   String
  plainText      String
  date           DateTime?    @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId String
}

model Post {
  id             String       @id @default(uuid())
  title          String
  date           DateTime?    @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId String
  contentId      String
  ownerId        String
}

model Enrollment {
  userId         String
  subjectId      String
  enrollmentDate DateTime    @default(now())
  roleTitle      SubjectRole
  status         Status      @default(ACTIVE)
  id             String      @id @default(uuid())
  subject        Subject     @relation(fields: [subjectId], references: [id])
  user           User        @relation(fields: [userId], references: [id])
}

model Seminar {
  id          String        @id @default(uuid())
  title       String        @unique
  description String?
  mentorId    String?
  contentId   String?
  subjectId   String?
  userId      String?
  status      SeminarStatus @default(DRAFT)
}

model Event {
  id             String          @id @default(uuid())
  title          String
  description    String
  linkedEntity   LinkedEntity
  linkedEntityId String
  status         Status          @default(ACTIVE)
  RoomTimeEvent  RoomTimeEvent[]
}

model PinnedEvent {
  id        String @id @default(uuid())
  subjectId String
  eventId   String
}

model Room {
  id            String          @id @default(uuid())
  title         String          @default("")
  capacity      Int
  RoomTimeEvent RoomTimeEvent[]
}

model RoomTimeEvent {
  id                String              @id @default(uuid())
  dateStart         DateTime
  dateEnd           DateTime
  eventId           String
  roomId            String
  status            Status              @default(ACTIVE)
  EventUserPresence EventUserPresence[]
  event             Event               @relation(fields: [eventId], references: [id])
  room              Room                @relation(fields: [roomId], references: [id])
}

model EventUserPresence {
  id              String        @id @default(uuid())
  presenceStatus  Boolean
  roomTimeEventId String
  userId          String
  roomTimeEvent   RoomTimeEvent @relation(fields: [roomTimeEventId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
}

enum Role {
  DEFAULT
  ADMIN
  SUPERADMIN
}

enum SubjectRole {
  STUDENT
  PROFESSOR
  OWNER
  DEMONSTRATOR
  ASSISTANT
}

enum Semester {
  WINTER
  SUMMER
}

enum Status {
  ACTIVE
  ARCHIVED
}

enum SeminarStatus {
  DRAFT
  CONFIRMED
  READY
}

enum LinkedEntity {
  USER
  SUBJECT
  SEMINAR
  POST
}
