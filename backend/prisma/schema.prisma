// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  firstname         String
  lastname          String
  jmbag             String              @unique
  email             String              @unique
  status            Role
  mentorID          Int                 @unique
  mentor            User                @relation("Mentorstvo", fields: [mentorID], references: [id])
  mentee            User[]              @relation("Mentorstvo")
  Enrollment        Enrollment[]
  EventUserPresence EventUserPresence[]
}

// treba stavit @unique na neke

model Subject {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  ects_bod    Int
  semester    Semester
  status      Status
  contentId   Int          @unique
  Enrollment  Enrollment[]
}

model Content {
  id             Int          @id @default(autoincrement())
  markdownText   String
  plainText      String
  date           DateTime     @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId Int
}

model Post {
  id             Int          @id @default(autoincrement())
  title          String
  Date           DateTime     @default(now())
  linkedEntity   LinkedEntity
  linkedEntityId Int
  contentId      Int
  ownerId        Int
}

model Enrollment {
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  subject        Subject  @relation(fields: [subjectId], references: [id])
  subjectId      Int
  enrollmentDate DateTime @default(now())
  roleTitle      Role
  status         Status

  @@id([userId, subjectId])
}

model Seminar {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  mentorId    Int
  type        String
  contentId   String
  subjectId   String
  userId      String
}

model Event {
  id             Int    @id @default(autoincrement())
  title          String
  description    String
  linkedEntity   String
  linkedEntityId String
}

model SeminarSuggestion {
  id        Int @id @default(autoincrement())
  seminarId Int
  subjectId Int
}

model Room {
  id       String @id
  capacity Int
}

model RoomTimeEvent {
  id                Int                 @id @default(autoincrement())
  dateStart         DateTime
  dateEnd           DateTime
  eventId           Int
  roomId            String
  EventUserPresence EventUserPresence[]
}

model EventUserPresence {
  id              Int           @id @default(autoincrement())
  presenceStatus  Boolean
  roomTimeEvent   RoomTimeEvent @relation(fields: [roomTimeEventId], references: [id])
  roomTimeEventId Int
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
}

enum Role {
  STUDENT
  PROFESSOR
  NOSITELJ
  ASISTENT
  ADMIN
}

enum Semester {
  WINTER
  SUMMER
}

enum Status {
  ACTIVE
  ARCHIVED
}

enum LinkedEntity {
  USER
  SUBJECT
  SEMINAR
  POST
}
